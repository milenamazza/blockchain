{"cells":[{"cell_type":"markdown","source":["# addestremento\n","addestramento del modello migliore e risultati sul test  "],"metadata":{"id":"I9_WOiTVqySU"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"0iidXjXM7pXO"},"outputs":[],"source":["%%capture\n","from google.colab import drive\n","drive.mount('/content/drive')  # Autenticazione con Google Drive\n","\n","!pip install torch_geometric\n","#!pip install torch-sparse\n","import pandas as pd\n","import os\n","import random\n","import numpy as np\n","import os.path as osp\n","import torch\n","import warnings\n","from torch_geometric.data import Data, HeteroData\n","from torch_geometric.transforms import RandomNodeSplit\n","from torch_geometric.nn import GCNConv, GATConv, SAGEConv, ChebConv\n","import torch_geometric.nn as pyg_nn\n","import torch.nn as nn\n","import torch_geometric.utils as pyg_utils\n","from torch.nn import Module, Linear\n","import torch.nn.functional as F\n","from sklearn.metrics import precision_recall_fscore_support, f1_score, classification_report\n","from torch_geometric.seed import seed_everything\n","import joblib\n","drive.mount('/content/drive')  # Autenticazione con Google Drive\n","\n","warnings.simplefilter(action='ignore')\n","SEED = 51\n","FILEPATH_TX = \"/content/drive/MyDrive/blockchain/00_gnn/risultati_finali/final_res/tx_result_4.csv\"\n","FILEPATH_WALLET = \"/content/drive/MyDrive/blockchain/00_gnn/risultati_finali/final_res/w_result_4.csv\"\n","\n","base_path = \"/content/drive/MyDrive/blockchain/E++/\"\n","path_comb = '/content/drive/MyDrive/blockchain/00_gnn/combination_do.csv'\n","\n","type_classification = 'w'"]},{"cell_type":"markdown","metadata":{"id":"XOk9zPoYDC5I"},"source":["##Crea db vuoto"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FCrI1kO2CYxi"},"outputs":[],"source":["def create_df():\n","  # Crea DataFrame vuoti\n","  df_tx = pd.DataFrame(columns=['epoch', 'hidden_channels', 'out_channels', 'num_layers', 'num_epoch', 'patience', 'lr', 'weight_decay', 'conv_type', 'eps', 'gamma','step_size', 'aggr', 'end'])\n","  df_wallet = pd.DataFrame(columns=['epoch', 'hidden_channels', 'out_channels', 'num_layers', 'num_epoch', 'patience', 'lr', 'weight_decay', 'conv_type', 'eps', 'gamma','step_size', 'aggr', 'end'])\n","\n","  # Salva i DataFrame come file CSV\n","  df_tx.to_csv(FILEPATH_TX, index=False)\n","  df_wallet.to_csv(FILEPATH_WALLET, index=False)\n","\n","#create_df()"]},{"cell_type":"markdown","metadata":{"id":"W1Syx8hzDPvM"},"source":["##Carica dati"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qobTcbrVqpwG"},"outputs":[],"source":["def load_data():\n","    # Loading transactions\n","\n","    #Reading edges, features and classes from transaction files (as done with the original dataset)\n","    df_edges_tx = pd.read_csv(osp.join(base_path, \"txs_edgelist.csv\"))\n","    df_features_tx = pd.read_csv(osp.join(base_path, \"txs_features.csv\"), header=None)\n","    df_classes_tx = pd.read_csv(osp.join(base_path, \"txs_classes.csv\"))\n","\n","    #Columns naming based on index\n","    colNames1_tx = {'0': 'txId', 1: \"Time step\"}\n","    colNames2_tx = {str(ii+2): \"Local_feature_\" + str(ii+1) for ii in range(94)}\n","    colNames3_tx = {str(ii+96): \"Aggregate_feature_\" + str(ii+1) for ii in range(72)}\n","\n","    colNames_tx = dict(colNames1_tx, **colNames2_tx, **colNames3_tx)\n","    colNames_tx = {int(jj): item_kk for jj, item_kk in colNames_tx.items()}\n","\n","    # Rename feature columns\n","    df_features_tx = df_features_tx.rename(columns=colNames_tx)\n","\n","    # Map unknown class to '3'\n","    df_classes_tx.loc[df_classes_tx['class'] == 'unknown', 'class'] = '3'\n","\n","    # Merge classes and features in one Dataframe\n","    df_class_feature_tx = pd.merge(df_classes_tx, df_features_tx)\n","\n","    # Exclude records with unknown class transaction\n","    df_class_feature_tx = df_class_feature_tx[df_class_feature_tx['class'] != 3]\n","\n","    # Build Dataframe with head and tail of transactions (edges)\n","    known_txs = df_class_feature_tx[\"txId\"].values\n","    df_edges_tx = df_edges_tx[(df_edges_tx[\"txId1\"].isin(known_txs)) & (df_edges_tx[\"txId2\"].isin(known_txs))]\n","\n","    # Build indices for features and edge types\n","    features_idx_tx = {name: idx for idx, name in enumerate(sorted(df_class_feature_tx[\"txId\"].unique()))}\n","    class_idx_tx = {name: idx for idx, name in enumerate(sorted(df_class_feature_tx[\"class\"].unique()))}\n","\n","    # Apply index encoding to features\n","    df_class_feature_tx[\"txId\"] = df_class_feature_tx[\"txId\"].apply(lambda name: features_idx_tx[name])\n","    df_class_feature_tx[\"class\"] = df_class_feature_tx[\"class\"].apply(lambda name: class_idx_tx[name])\n","\n","    # Apply index encoding to edges\n","    df_edges_tx[\"txId1\"] = df_edges_tx[\"txId1\"].apply(lambda name: features_idx_tx[name])\n","    df_edges_tx[\"txId2\"] = df_edges_tx[\"txId2\"].apply(lambda name: features_idx_tx[name])\n","\n","    # Loading wallets\n","\n","    # From file\n","    df_edges_wallet = pd.read_csv(osp.join(base_path, \"AddrAddr_edgelist.csv\"))\n","    df_class_feature_wallet = pd.read_csv(osp.join(base_path, \"wallets_features_classes_combined.csv\"))\n","\n","    # Exclude records with unknown class transaction\n","    #print(df_class_feature_wallet.shape)\n","    df_class_feature_wallet = df_class_feature_wallet[df_class_feature_wallet[\"class\"] != 3]\n","    #print(df_class_feature_wallet.shape)\n","\n","    # Build Dataframe with head and tail of AddrToAddr (edges)\n","    known_wallets = df_class_feature_wallet[\"address\"].values\n","    df_edges_wallet = df_edges_wallet[(df_edges_wallet[\"input_address\"].isin(known_wallets)) & (df_edges_wallet[\"output_address\"].isin(known_wallets))]\n","\n","    # Building indices for features and edge types\n","    features_idx_wallet = {name: idx for idx, name in enumerate(sorted(df_class_feature_wallet[\"address\"].unique()))}\n","    class_idx_wallet = {name: idx for idx, name in enumerate(sorted(df_class_feature_wallet[\"class\"].unique()))}\n","\n","    # Apply index encoding to features\n","    df_class_feature_wallet[\"address\"] = df_class_feature_wallet[\"address\"].apply(lambda name: features_idx_wallet[name])\n","    df_class_feature_wallet[\"class\"] = df_class_feature_wallet[\"class\"].apply(lambda name: class_idx_wallet[name])\n","\n","    # Apply index encoding to edges\n","    df_edges_wallet[\"input_address\"] = df_edges_wallet[\"input_address\"].apply(lambda name: features_idx_wallet[name])\n","    df_edges_wallet[\"output_address\"] = df_edges_wallet[\"output_address\"].apply(lambda name: features_idx_wallet[name])\n","\n","    # Loading AddrTx and TxAddr\n","\n","    # From file\n","    df_edges_wallet_tx = pd.read_csv(osp.join(base_path, \"AddrTx_edgelist.csv\"))\n","    df_edges_tx_wallet = pd.read_csv(osp.join(base_path, \"TxAddr_edgelist.csv\"))\n","\n","    # Build Dataframe with head and tail of AddrTx (edges)\n","    df_edges_wallet_tx = df_edges_wallet_tx[(df_edges_wallet_tx[\"input_address\"].isin(known_wallets)) & df_edges_wallet_tx[\"txId\"].isin(known_txs)]\n","    df_edges_tx_wallet = df_edges_tx_wallet[(df_edges_tx_wallet[\"txId\"].isin(known_txs)) & df_edges_tx_wallet[\"output_address\"].isin(known_wallets)]\n","\n","    # Apply index encoding to edges\n","    df_edges_wallet_tx[\"input_address\"] = df_edges_wallet_tx[\"input_address\"].apply(lambda name: features_idx_wallet[name])\n","    df_edges_wallet_tx[\"txId\"] = df_edges_wallet_tx[\"txId\"].apply(lambda name: features_idx_tx[name])\n","    df_edges_tx_wallet[\"txId\"] = df_edges_tx_wallet[\"txId\"].apply(lambda name: features_idx_tx[name])\n","    df_edges_tx_wallet[\"output_address\"] = df_edges_tx_wallet[\"output_address\"].apply(lambda name: features_idx_wallet[name])\n","\n","    return df_class_feature_tx, df_edges_tx, df_class_feature_wallet, df_edges_wallet, df_edges_wallet_tx, df_edges_tx_wallet, features_idx_tx, features_idx_wallet\n","\n","def data_to_pyg(df_class_feature_tx, df_edges_tx, df_class_feature_wallet, df_edges_wallet, df_edges_wallet_tx, df_edges_tx_wallet, features_idx_tx, features_idx_wallet):\n","    data = HeteroData()\n","\n","    # Defining PyG objects for transactions\n","    df_class_feature_tx = df_class_feature_tx.fillna(0)\n","    data['tx'].x = torch.tensor(df_class_feature_tx.iloc[:, 3:].values, dtype=torch.float)\n","    data['tx'].y = torch.tensor(df_class_feature_tx[\"class\"].values, dtype=torch.long)\n","    data['tx','is_related_to','tx'].edge_index = torch.tensor([df_edges_tx[\"txId1\"].values,\n","                            df_edges_tx[\"txId2\"].values], dtype=torch.int64)\n","    #data['tx'] = random_node_split(num_val=0.15, num_test=0.2)(data['tx'])\n","    # Defining PyG objects for wallets\n","    data['wallet'].x = torch.tensor(df_class_feature_wallet.iloc[:, 3:].values, dtype=torch.float)\n","    data['wallet'].y = torch.tensor(df_class_feature_wallet[\"class\"].values, dtype=torch.long)\n","    data['wallet','interacts_with','wallet'].edge_index = torch.tensor([df_edges_wallet[\"input_address\"].values,\n","                            df_edges_wallet[\"output_address\"].values], dtype=torch.int64)\n","    #data['wallet'] = random_node_split(num_val=0.15, num_test=0.2)(data['wallet'])\n","    # Defining PyG objects for cross-edges\n","    data['wallet','performs','tx'].edge_index = torch.tensor([df_edges_wallet_tx[\"input_address\"].values,\n","                                         df_edges_wallet_tx[\"txId\"].values], dtype=torch.int64)\n","\n","    data['tx', 'flows_into', 'wallet'].edge_index = torch.tensor([df_edges_tx_wallet[\"txId\"].values,\n","                                         df_edges_tx_wallet[\"output_address\"].values], dtype=torch.int64)\n","\n","    # Impostare il seed per la divisione del dataset\n","    return RandomNodeSplit(num_val=0.10, num_test=0.15)(data)"]},{"cell_type":"markdown","metadata":{"id":"OhFPkCpExzOL"},"source":["##Preprocessing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AQfEkZ1nx44T"},"outputs":[],"source":["from sklearn.preprocessing import StandardScaler, MinMaxScaler, Normalizer\n","from sklearn.decomposition import PCA"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Do2dQUF-x7hj"},"outputs":[],"source":["#NEW -> SU RANGE\n","# Utility per conversione a tensor\n","def to_tensor(arr):\n","    return torch.tensor(arr, dtype=torch.float).to(device)\n","\n","def scale_features(data, method=\"standard\"):\n","  if method == 'no':\n","    return data\n","\n","  # Scaling per training\n","  data['tx'].x[data['tx'].train_mask] = to_tensor(\n","      scale_train_data(data['tx'].x[data['tx'].train_mask].cpu().numpy(), method, 'tx')\n","  )\n","  data['wallet'].x[data['wallet'].train_mask] = to_tensor(\n","      scale_train_data(data['wallet'].x[data['wallet'].train_mask].cpu().numpy(), method, 'wallet')\n","  )\n","\n","  # Scaling per validation\n","  data['tx'].x[data['tx'].val_mask] = to_tensor(scale_validation_data(data['tx'].x[data['tx'].val_mask].cpu().numpy(), method, 'tx'))\n","  data['wallet'].x[data['wallet'].val_mask] = to_tensor(scale_validation_data(data['wallet'].x[data['wallet'].val_mask].cpu().numpy(), method, 'wallet'))\n","\n","  data['tx'].x[data['tx'].test_mask] = to_tensor(scale_validation_data(data['tx'].x[data['tx'].test_mask].cpu().numpy(), method, 'tx'))\n","  data['wallet'].x[data['wallet'].test_mask] = to_tensor(scale_validation_data(data['wallet'].x[data['wallet'].test_mask].cpu().numpy(), method, 'wallet'))\n","  return data\n","\n","def scale_train_data(train, scaling_method, df):\n","\n","    if 'standard' in scaling_method:\n","        scaler = StandardScaler()\n","        scaled_train = scaler.fit_transform(train)  # Scala tutte le colonne\n","        joblib.dump(scaler, f\"scaler_standard_{df}.pkl\")\n","\n","        if 'l2' in scaling_method:\n","            norm = Normalizer(norm='l2')\n","            scaled_train = norm.fit_transform(scaled_train)\n","            joblib.dump(norm, f\"scaler_l2_{df}.pkl\")\n","    else:\n","        raise ValueError(f\"Metodo di scaling '{scaling_method}' non supportato.\")\n","\n","    return scaled_train\n","\n","def scale_validation_data(val, scaling_method, df):\n","\n","    if 'standard' in scaling_method:\n","        scaler = joblib.load(f\"scaler_standard_{df}.pkl\")\n","        scaled_val = scaler.transform(val)  # Scala tutte le colonne\n","\n","        if 'l2' in scaling_method:\n","            norm = joblib.load(f\"scaler_l2_{df}.pkl\")\n","            scaled_val = norm.transform(scaled_val)\n","    else:\n","        raise ValueError(f\"Metodo di scaling '{scaling_method}' non supportato.\")\n","\n","    return scaled_val"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PVRMmabn21eP"},"outputs":[],"source":["def dimentional_reduction(data, dim_reduction, pca_threshold):\n","    if dim_reduction == 'no':\n","        return data\n","    elif dim_reduction == 'pca':\n","        data1 = copy.deepcopy(data)\n","\n","        transformed_tx_data = apply_pca_train(data['tx'].x[data['tx'].train_mask].cpu().numpy(), 'tx', pca_threshold)\n","        transformed_wallet_data = apply_pca_train(data['wallet'].x[data['wallet'].train_mask].cpu().numpy(), 'wallet', pca_threshold)\n","\n","        data1['tx'].x = torch.zeros((data['tx'].x.shape[0], transformed_tx_data.shape[1]), dtype=torch.float, device=device)\n","        data1['wallet'].x = torch.zeros((data['wallet'].x.shape[0], transformed_wallet_data.shape[1]), dtype=torch.float, device=device)\n","\n","        data1['tx'].x[data['tx'].train_mask] = to_tensor(transformed_tx_data)\n","        data1['wallet'].x[data['wallet'].train_mask] = to_tensor(transformed_wallet_data)\n","\n","        transformed_tx_data = apply_pca_validation(data['tx'].x[data['tx'].val_mask].cpu().numpy(), 'tx')\n","        transformed_wallet_data = apply_pca_validation(data['wallet'].x[data['wallet'].val_mask].cpu().numpy(), 'wallet')\n","        data1['tx'].x[data['tx'].val_mask] = to_tensor(transformed_tx_data)\n","        data1['wallet'].x[data['wallet'].val_mask] = to_tensor(transformed_wallet_data)\n","\n","        transformed_tx_data = apply_pca_validation(data['tx'].x[data['tx'].test_mask].cpu().numpy(), 'tx')\n","        transformed_wallet_data = apply_pca_validation(data['wallet'].x[data['wallet'].test_mask].cpu().numpy(), 'wallet')\n","        data1['tx'].x[data['tx'].test_mask] = to_tensor(transformed_tx_data)\n","        data1['wallet'].x[data['wallet'].test_mask] = to_tensor(transformed_wallet_data)\n","\n","        return data1\n","\n","def apply_pca_train(train, df, pca_threshold=0.99):\n","    pca = PCA(random_state=SEED)\n","    pca.fit(train)\n","\n","    # Selezione componenti principali\n","    cumulative_variance = pca.explained_variance_ratio_.cumsum()\n","    n_components = (cumulative_variance >= pca_threshold).argmax() + 1\n","\n","    pca = PCA(n_components=n_components, random_state=SEED)\n","    transformed_data = pca.fit_transform(train).astype(np.float32)\n","\n","    joblib.dump(pca, f\"pca_model_{df}.pkl\")\n","    print(f\"  Numero di componenti principali per {df}: {pca.n_components_}\")\n","\n","    return transformed_data\n","\n","def apply_pca_validation(val, df):\n","    pca = joblib.load(f\"pca_model_{df}.pkl\")\n","    transformed_data = pca.transform(val).astype(np.float32)\n","    return transformed_data"]},{"cell_type":"markdown","metadata":{"id":"CaNNtrNLDSdI"},"source":["##Train"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MbfXKtdynFBL"},"outputs":[],"source":["import torch\n","import torch.nn.functional as F\n","from torch.nn import Linear, Dropout\n","from torch_geometric.nn import HeteroConv, GATConv, SAGEConv, TransformerConv\n","import random\n","from itertools import product\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, balanced_accuracy_score\n","import copy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sxfbqge_p64q"},"outputs":[],"source":["def set_seed(seed = 51):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed(seed)\n","    torch.cuda.manual_seed_all(seed)  # Per più GPU\n","\n","    torch.backends.cudnn.deterministic = True\n","    torch.backends.cudnn.benchmark = False\n","    torch.use_deterministic_algorithms(True, warn_only=True)\n","\n","    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n","    seed_everything(seed)\n","device = \"cpu\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EiBF-BZYfq7b"},"outputs":[],"source":["class ResidualHeteroGNN(torch.nn.Module):\n","    def __init__(self, conv, hidden_channels=64, num_layers=2, aggr='sum', dropout_prob=0.5, out_channels=2, num_head=1):\n","        super().__init__()\n","        self.convs = torch.nn.ModuleList()\n","        self.skips = torch.nn.ModuleList()\n","        self.dropout = Dropout(p=dropout_prob)\n","        heads = num_head if conv == 'Transformer' else 1 # Define heads\n","\n","        for _ in range(num_layers):\n","            if conv == 'GAT':\n","                conv_layer = HeteroConv({\n","                    ('tx', 'is_related_to', 'tx'): GATConv((-1, -1), hidden_channels, add_self_loops=False, heads=heads),\n","                    ('wallet', 'interacts_with', 'wallet'): GATConv((-1, -1), hidden_channels, add_self_loops=False, heads=heads),\n","                    ('wallet', 'performs', 'tx'): GATConv((-1, -1), hidden_channels, add_self_loops=False, heads=heads),\n","                    ('tx', 'flows_into', 'wallet'): GATConv((-1, -1), hidden_channels, add_self_loops=False, heads=heads)\n","                }, aggr=aggr)\n","            elif conv == 'SAGE':\n","                conv_layer = HeteroConv({\n","                    ('tx', 'is_related_to', 'tx'): SAGEConv(-1, hidden_channels),\n","                    ('wallet', 'interacts_with', 'wallet'): SAGEConv(-1, hidden_channels),\n","                    ('wallet', 'performs', 'tx'): SAGEConv(-1, hidden_channels),\n","                    ('tx', 'flows_into', 'wallet'): SAGEConv(-1, hidden_channels)\n","                }, aggr=aggr)\n","            elif conv == 'Transformer':\n","                conv_layer = HeteroConv({\n","                    ('tx', 'is_related_to', 'tx'): TransformerConv((-1, -1), hidden_channels, heads=heads),\n","                    ('wallet', 'interacts_with', 'wallet'): TransformerConv((-1, -1), hidden_channels, heads=heads),\n","                    ('wallet', 'performs', 'tx'): TransformerConv((-1, -1), hidden_channels, heads=heads),\n","                    ('tx', 'flows_into', 'wallet'): TransformerConv((-1, -1), hidden_channels, heads=heads)\n","                }, aggr=aggr)\n","            else:\n","                raise ValueError(\"Invalid convolution type. Choose from ['GAT', 'SAGE', 'Transformer']\")\n","\n","            self.convs.append(conv_layer)\n","            self.skips.append(Linear(hidden_channels * heads, hidden_channels * heads)) # Fix: Linear layer expects the output of conv\n","\n","        # FIX: Modifica della dimensione di input dei layer lineari\n","        self.lin_tx = Linear(hidden_channels * heads, out_channels)\n","        self.lin_wallet = Linear(hidden_channels * heads, out_channels)\n","\n","    def forward(self, x_dict, edge_index_dict):\n","        for conv, skip in zip(self.convs, self.skips):\n","            x_dict_new = conv(x_dict, edge_index_dict)\n","            x_dict = {key: self.dropout(F.relu(x + skip(x_dict_new[key]))) for key, x in x_dict_new.items()}  # Residual + Dropout\n","        return self.lin_tx(x_dict['tx']), self.lin_wallet(x_dict['wallet'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xdcebmslq5D0"},"outputs":[],"source":["class HeteroGNN(torch.nn.Module):\n","    def __init__(self, conv, hidden_channels=64, num_layers=2, aggr='sum', dropout_prob=0, out_channels=2, num_head=1):\n","        super().__init__()\n","        self.convs = torch.nn.ModuleList()\n","        self.dropout = Dropout(p=dropout_prob)\n","        heads = num_head if conv == 'Transformer' else 1  # Definiamo i heads solo se necessario\n","\n","        for _ in range(num_layers):\n","            if conv == 'GAT':\n","                conv_layer = HeteroConv({\n","                    ('tx', 'is_related_to', 'tx'): GATConv((-1, -1), hidden_channels, add_self_loops=False),\n","                    ('wallet', 'interacts_with', 'wallet'): GATConv((-1, -1), hidden_channels, add_self_loops=False),\n","                    ('wallet', 'performs', 'tx'): GATConv((-1, -1), hidden_channels, add_self_loops=False),\n","                    ('tx', 'flows_into', 'wallet'): GATConv((-1, -1), hidden_channels, add_self_loops=False)\n","                }, aggr=aggr)\n","            elif conv == 'SAGE':\n","                conv_layer = HeteroConv({\n","                    ('tx', 'is_related_to', 'tx'): SAGEConv(-1, hidden_channels),\n","                    ('wallet', 'interacts_with', 'wallet'): SAGEConv(-1, hidden_channels),\n","                    ('wallet', 'performs', 'tx'): SAGEConv(-1, hidden_channels),\n","                    ('tx', 'flows_into', 'wallet'): SAGEConv(-1, hidden_channels)\n","                }, aggr=aggr)\n","            elif conv == 'Transformer':\n","                conv_layer = HeteroConv({\n","                    ('tx', 'is_related_to', 'tx'): TransformerConv((-1, -1), hidden_channels, heads=heads),\n","                    ('wallet', 'interacts_with', 'wallet'): TransformerConv((-1, -1), hidden_channels, heads=heads),\n","                    ('wallet', 'performs', 'tx'): TransformerConv((-1, -1), hidden_channels, heads=heads),\n","                    ('tx', 'flows_into', 'wallet'): TransformerConv((-1, -1), hidden_channels, heads=heads)\n","                }, aggr=aggr)\n","            else:\n","                raise ValueError(\"Invalid convolution type. Choose from ['GAT', 'SAGE', 'Transformer']\")\n","\n","            self.convs.append(conv_layer)\n","\n","        # FIX: Modifica della dimensione di input dei layer lineari\n","        self.lin_tx = Linear(hidden_channels * heads, out_channels)\n","        self.lin_wallet = Linear(hidden_channels * heads, out_channels)\n","\n","    def forward(self, x_dict, edge_index_dict):\n","        for conv in self.convs:\n","            x_dict = conv(x_dict, edge_index_dict)\n","            x_dict = {key: self.dropout(x.relu()) for key, x in x_dict.items()}\n","        return self.lin_tx(x_dict['tx']), self.lin_wallet(x_dict['wallet'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eJEJVt5l04Eb"},"outputs":[],"source":["def is_combination_tested(filepath, new_row):\n","    existing_results = pd.read_csv(filepath)\n","\n","    # Identifica le colonne comuni tra il dataset e new_row\n","    dataset_columns = set(existing_results.columns)\n","    comparison_columns = [col for col in new_row.keys() if col not in ['end', 'num_epoch', 'epoch']]\n","\n","    # Filtra le combinazioni\n","    filtered_results = existing_results.copy()\n","    #filtered_results = filtered_results[filtered_results['end'] == True]\n","    filtered_results = filtered_results[filtered_results['num_epoch'] >= new_row['num_epoch']]\n","\n","    for col in comparison_columns:\n","        if col in dataset_columns:\n","            # Mantieni solo le righe in cui i valori corrispondono (o sono entrambi NaN)\n","            filtered_results = filtered_results[\n","                (filtered_results[col] == new_row[col]) | (pd.isna(filtered_results[col]) & pd.isna(new_row[col]))\n","            ]\n","\n","    return not filtered_results.empty\n","\n","def append_and_save_results(FILEPATH_TX, FILEPATH_WALLET, params_tx, params_wallet, end=False):\n","  def append_and_save_result(filepath, new_row, end=False):\n","    new_row['end'] = end\n","    # Leggi i risultati esistenti\n","    results_df = pd.read_csv(filepath)\n","    results_df = pd.concat([results_df, pd.DataFrame([new_row])], ignore_index=True)\n","    results_df.to_csv(filepath, index=False)\n","\n","  append_and_save_result(FILEPATH_TX, params_tx, end)\n","  append_and_save_result(FILEPATH_WALLET, params_wallet, end)\n","  if end:\n","    df_comb = pd.read_csv(path_comb)\n","    filtered_params = {key: params_tx[key] for key in params_tx if \"train\" not in key and \"val\" not in key}\n","    print(filtered_params)\n","    df_comb = pd.concat([df_comb, pd.DataFrame([filtered_params])], ignore_index=True)\n","    df_comb.to_csv(path_comb, index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1vo1zTF6zxQR"},"outputs":[],"source":["def compute_class_weights(data):\n","    class_counts = torch.bincount(data['tx'].y)\n","    weights = 1.0 / class_counts.float()\n","    weights /= weights.sum()\n","    return weights\n","\n","def eval(model, data, out_tx, out_wallet, params):\n","\n","  class_weights = compute_class_weights(data)\n","  criterion = torch.nn.CrossEntropyLoss(weight=class_weights)\n","\n","  model.eval()  # Imposta il modello in modalità di valutazione\n","\n","  tx_mask = data['tx'].train_mask\n","  wallet_mask = data['wallet'].train_mask\n","  tx_mask_val =  data['tx'].val_mask\n","  wallet_mask_val = data['wallet'].val_mask\n","\n","  params_tx = copy.copy(params)\n","  params_wallet = copy.copy(params)\n","\n","  # Calculate metrics for transactions\n","  params_tx['train_loss'] = criterion(out_tx[tx_mask], data['tx'].y[tx_mask].cpu())  # Convert to scalar\n","  params_tx['train_acc'] = accuracy_score(data['tx'].y[tx_mask].cpu(), out_tx[tx_mask].argmax(dim=1).cpu())\n","  params_tx['train_f1'] = f1_score(data['tx'].y[tx_mask].cpu(), out_tx[tx_mask].argmax(dim=1).cpu())\n","  params_tx['train_balanced_acc'] = balanced_accuracy_score(data['tx'].y[tx_mask].cpu(), out_tx[tx_mask].argmax(dim=1).cpu())\n","  # Calculate metrics for wallets\n","  params_wallet['train_loss'] = criterion(out_wallet[wallet_mask], data['wallet'].y[wallet_mask].cpu())  # Convert to scalar\n","  params_wallet['train_acc'] = accuracy_score(data['wallet'].y[wallet_mask].cpu(), out_wallet[wallet_mask].argmax(dim=1).cpu())\n","  params_wallet['train_f1'] = f1_score(data['wallet'].y[wallet_mask].cpu(), out_wallet[wallet_mask].argmax(dim=1).cpu())\n","  params_wallet['train_balanced_acc'] = balanced_accuracy_score(data['wallet'].y[wallet_mask].cpu(), out_wallet[wallet_mask].argmax(dim=1).cpu())\n","\n","  loss = params_tx['train_loss'] + params_wallet['train_loss']\n","\n","  with torch.no_grad():\n","    params_tx['val_loss'] = criterion(out_tx[tx_mask_val], data['tx'].y[tx_mask_val].cpu())  # Convert to scalar\n","    params_tx['val_acc'] = accuracy_score(data['tx'].y[tx_mask_val].cpu(), out_tx[tx_mask_val].argmax(dim=1).cpu())\n","    params_tx['val_precision'] = precision_score(data['tx'].y[tx_mask_val].cpu(), out_tx[tx_mask_val].argmax(dim=1).cpu())\n","    params_tx['val_recall'] = recall_score(data['tx'].y[tx_mask_val].cpu(), out_tx[tx_mask_val].argmax(dim=1).cpu())\n","    params_tx['val_f1'] = f1_score(data['tx'].y[tx_mask_val].cpu(), out_tx[tx_mask_val].argmax(dim=1).cpu())\n","    params_tx['val_balanced_acc'] = balanced_accuracy_score(data['tx'].y[tx_mask_val].cpu(), out_tx[tx_mask_val].argmax(dim=1).cpu())\n","\n","    # Calculate metrics for wallets\n","    params_wallet['val_loss'] = criterion(out_wallet[wallet_mask_val], data['wallet'].y[wallet_mask_val].cpu())  # Convert to scalar\n","    params_wallet['val_acc'] = accuracy_score(data['wallet'].y[wallet_mask_val].cpu(), out_wallet[wallet_mask_val].argmax(dim=1).cpu())\n","    params_wallet['val_precision'] = precision_score(data['wallet'].y[wallet_mask_val].cpu(), out_wallet[wallet_mask_val].argmax(dim=1).cpu())\n","    params_wallet['val_recall'] = recall_score(data['wallet'].y[wallet_mask_val].cpu(), out_wallet[wallet_mask_val].argmax(dim=1).cpu())\n","    params_wallet['val_f1'] = f1_score(data['wallet'].y[wallet_mask_val].cpu(), out_wallet[wallet_mask_val].argmax(dim=1).cpu())\n","    params_wallet['val_balanced_acc'] = balanced_accuracy_score(data['wallet'].y[wallet_mask_val].cpu(), out_wallet[wallet_mask_val].argmax(dim=1).cpu())\n","\n","    print(f\"Epoch {str(params['epoch']).zfill(3)}:      TX: Train Loss: {params_tx['train_loss']:.4f}, Acc: {params_tx['train_acc']:.4f}, F1: {params_tx['train_f1']:.4f} Bal: {params_tx['train_balanced_acc']:.4f} - Val Loss: {params_tx['val_loss']:.4f}, Accuracy: {params_tx['val_acc']:.4f}, F1: {params_tx['val_f1']:.4f} Bal: {params_tx['val_balanced_acc']:.4f}\")\n","    print(f\"           WALLETS: Train Loss: {params_wallet['train_loss']:.8f}, Acc: {params_wallet['train_acc']:.8f}, F1: {params_wallet['train_f1']:.8f} Bal: {params_wallet['train_balanced_acc']:.4f} - Val Loss: {params_wallet['val_loss']:.8f}, Accuracy: {params_wallet['val_acc']:.4f}, F1: {params_wallet['val_f1']:.4f} Bal: {params_wallet['val_balanced_acc']:.4f}\")\n","\n","  return loss, params_tx, params_wallet\n","\n","\n","def eval_total(model, data, out_tx, out_wallet, params, best_epoch):\n","\n","  class_weights = compute_class_weights(data)\n","  criterion = torch.nn.CrossEntropyLoss(weight=class_weights)\n","\n","  model.eval()  # Imposta il modello in modalitÃ  di valutazione\n","\n","  tx_mask = data['tx'].train_mask\n","  wallet_mask = data['wallet'].train_mask\n","  tx_mask_val =  data['tx'].val_mask\n","  wallet_mask_val = data['wallet'].val_mask\n","  tx_mask_test = data['tx'].test_mask\n","  wallet_mask_test = data['wallet'].test_mask\n","\n","  params_tx = copy.copy(params)\n","  params_wallet = copy.copy(params)\n","\n","  # Calculate metrics for transactions\n","  params_tx['train_loss'] = criterion(out_tx[tx_mask], data['tx'].y[tx_mask].cpu())  # Convert to scalar\n","  params_tx['train_acc'] = accuracy_score(data['tx'].y[tx_mask].cpu(), out_tx[tx_mask].argmax(dim=1).cpu())\n","  params_tx['train_f1'] = f1_score(data['tx'].y[tx_mask].cpu(), out_tx[tx_mask].argmax(dim=1).cpu())\n","  params_tx['train_balanced_acc'] = balanced_accuracy_score(data['tx'].y[tx_mask].cpu(), out_tx[tx_mask].argmax(dim=1).cpu())\n","  # Calculate metrics for wallets\n","  params_wallet['train_loss'] = criterion(out_wallet[wallet_mask], data['wallet'].y[wallet_mask].cpu())  # Convert to scalar\n","  params_wallet['train_acc'] = accuracy_score(data['wallet'].y[wallet_mask].cpu(), out_wallet[wallet_mask].argmax(dim=1).cpu())\n","  params_wallet['train_f1'] = f1_score(data['wallet'].y[wallet_mask].cpu(), out_wallet[wallet_mask].argmax(dim=1).cpu())\n","  params_wallet['train_balanced_acc'] = balanced_accuracy_score(data['wallet'].y[wallet_mask].cpu(), out_wallet[wallet_mask].argmax(dim=1).cpu())\n","\n","  with torch.no_grad():\n","    # Calculate metrics for validation\n","    params_tx['val_loss'] = criterion(out_tx[tx_mask_val], data['tx'].y[tx_mask_val].cpu())  # Convert to scalar\n","    params_tx['val_acc'] = accuracy_score(data['tx'].y[tx_mask_val].cpu(), out_tx[tx_mask_val].argmax(dim=1).cpu())\n","    params_tx['val_precision'] = precision_score(data['tx'].y[tx_mask_val].cpu(), out_tx[tx_mask_val].argmax(dim=1).cpu())\n","    params_tx['val_recall'] = recall_score(data['tx'].y[tx_mask_val].cpu(), out_tx[tx_mask_val].argmax(dim=1).cpu())\n","    params_tx['val_f1'] = f1_score(data['tx'].y[tx_mask_val].cpu(), out_tx[tx_mask_val].argmax(dim=1).cpu())\n","    params_tx['val_balanced_acc'] = balanced_accuracy_score(data['tx'].y[tx_mask_val].cpu(), out_tx[tx_mask_val].argmax(dim=1).cpu())\n","    report_tx_val = classification_report(data['tx'].y[tx_mask_val].cpu(), out_tx[tx_mask_val].argmax(dim=1).cpu())\n","\n","    params_wallet['val_loss'] = criterion(out_wallet[wallet_mask_val], data['wallet'].y[wallet_mask_val].cpu())  # Convert to scalar\n","    params_wallet['val_acc'] = accuracy_score(data['wallet'].y[wallet_mask_val].cpu(), out_wallet[wallet_mask_val].argmax(dim=1).cpu())\n","    params_wallet['val_precision'] = precision_score(data['wallet'].y[wallet_mask_val].cpu(), out_wallet[wallet_mask_val].argmax(dim=1).cpu())\n","    params_wallet['val_recall'] = recall_score(data['wallet'].y[wallet_mask_val].cpu(), out_wallet[wallet_mask_val].argmax(dim=1).cpu())\n","    params_wallet['val_f1'] = f1_score(data['wallet'].y[wallet_mask_val].cpu(), out_wallet[wallet_mask_val].argmax(dim=1).cpu())\n","    params_wallet['val_balanced_acc'] = balanced_accuracy_score(data['wallet'].y[wallet_mask_val].cpu(), out_wallet[wallet_mask_val].argmax(dim=1).cpu())\n","    report_wallet_val = classification_report(data['wallet'].y[wallet_mask_val].cpu(), out_wallet[wallet_mask_val].argmax(dim=1).cpu())\n","\n","    # Calculate metrics for test\n","    params_tx['test_loss'] = criterion(out_tx[tx_mask_test], data['tx'].y[tx_mask_test].cpu())  # Convert to scalar\n","    params_tx['test_acc'] = accuracy_score(data['tx'].y[tx_mask_test].cpu(), out_tx[tx_mask_test].argmax(dim=1).cpu())\n","    params_tx['test_precision'] = precision_score(data['tx'].y[tx_mask_test].cpu(), out_tx[tx_mask_test].argmax(dim=1).cpu())\n","    params_tx['test_recall'] = recall_score(data['tx'].y[tx_mask_test].cpu(), out_tx[tx_mask_test].argmax(dim=1).cpu())\n","    params_tx['test_f1'] = f1_score(data['tx'].y[tx_mask_test].cpu(), out_tx[tx_mask_test].argmax(dim=1).cpu())\n","    params_tx['test_balanced_acc'] = balanced_accuracy_score(data['tx'].y[tx_mask_test].cpu(), out_tx[tx_mask_test].argmax(dim=1).cpu())\n","    report_tx_test = classification_report(data['tx'].y[tx_mask_test].cpu(), out_tx[tx_mask_test].argmax(dim=1).cpu())\n","\n","    params_wallet['test_loss'] = criterion(out_wallet[wallet_mask_test], data['wallet'].y[wallet_mask_test].cpu())  # Convert to scalar\n","    params_wallet['test_acc'] = accuracy_score(data['wallet'].y[wallet_mask_test].cpu(), out_wallet[wallet_mask_test].argmax(dim=1).cpu())\n","    params_wallet['test_precision'] = precision_score(data['wallet'].y[wallet_mask_test].cpu(), out_wallet[wallet_mask_test].argmax(dim=1).cpu())\n","    params_wallet['test_recall'] = recall_score(data['wallet'].y[wallet_mask_test].cpu(), out_wallet[wallet_mask_test].argmax(dim=1).cpu())\n","    params_wallet['test_f1'] = f1_score(data['wallet'].y[wallet_mask_test].cpu(), out_wallet[wallet_mask_test].argmax(dim=1).cpu())\n","    params_wallet['test_balanced_acc'] = balanced_accuracy_score(data['wallet'].y[wallet_mask_test].cpu(), out_wallet[wallet_mask_test].argmax(dim=1).cpu())\n","    report_wallet_test = classification_report(data['wallet'].y[wallet_mask_test].cpu(), out_wallet[wallet_mask_test].argmax(dim=1).cpu())\n","\n","    # Stampa delle metriche con formattazione migliorata\n","    print('Final_result for '+type_classification)\n","    print(params)\n","    print(f\"Epoch {best_epoch}:\")\n","    print(\"  TX:\")\n","    print(f\"   Train: Loss={params_tx['train_loss']:.4f}, Acc={params_tx['train_acc']:.4f}, F1={params_tx['train_f1']:.4f}, Bal. Acc={params_tx['train_balanced_acc']:.4f}\")\n","    print(f\"   Val:   Loss={params_tx['val_loss']:.4f}, Acc={params_tx['val_acc']:.4f}, F1={params_tx['val_f1']:.4f}, Bal. Acc={params_tx['val_balanced_acc']:.4f}\")\n","    print(f\"   Test:  Loss={params_tx['test_loss']:.4f}, Acc={params_tx['test_acc']:.4f}, F1={params_tx['test_f1']:.4f}, Bal. Acc={params_tx['test_balanced_acc']:.4f}\")\n","    print(report_tx_val)\n","    print(report_tx_test)\n","    print(\"  WALLETS:\")\n","    print(f\"   Train: Loss={params_wallet['train_loss']:.8f}, Acc={params_wallet['train_acc']:.8f}, F1={params_wallet['train_f1']:.8f}, Bal. Acc={params_wallet['train_balanced_acc']:.4f}\")\n","    print(f\"   Val:   Loss={params_wallet['val_loss']:.8f}, Acc={params_wallet['val_acc']:.4f}, F1={params_wallet['val_f1']:.4f}, Bal. Acc={params_wallet['val_balanced_acc']:.4f}\")\n","    print(f\"   Test:  Loss={params_wallet['test_loss']:.8f}, Acc={params_wallet['test_acc']:.4f}, F1={params_wallet['test_f1']:.4f}, Bal. Acc={params_wallet['test_balanced_acc']:.4f}\")\n","    print(report_wallet_val)\n","    print(report_wallet_test)\n","    print()\n","\n","def compute_class_weights(data):\n","    class_counts = torch.bincount(data['tx'].y)\n","    weights = 1.0 / class_counts.float()\n","    weights /= weights.sum()\n","    return weights\n","\n","def train(model, data, params):\n","    best_model = None\n","    best_epoch = None\n","\n","    if params['optimizer'] == 'Adam':\n","      optimizer = torch.optim.Adam(model.parameters(), lr=params['lr'], weight_decay=params['weight_decay'])\n","    elif params['optimizer'] == 'AdamW':\n","      optimizer = torch.optim.AdamW(model.parameters(), lr=params['lr'], weight_decay=params['weight_decay'])\n","    else:\n","      optimizer = None\n","\n","    if params['lr_scheduler'] == 'ReduceLROnPlateau':\n","      scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=params['factor'], patience=params['p'])\n","    elif params['lr_scheduler'] == 'CosineAnnealingLR':\n","      scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=params['T_max'], eta_min=params['eta_min'])\n","    elif params['lr_scheduler'] == 'StepLR':\n","      scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=params['step_size'], gamma=params['gamma'])\n","    else:\n","      scheduler = None\n","\n","    print(f'Combinazione: {params}')\n","    model.train()\n","    tx_mask = data['tx'].train_mask\n","    wallet_mask = data['wallet'].train_mask\n","    tx_mask_val =  data['tx'].val_mask\n","    wallet_mask_val = data['wallet'].val_mask\n","\n","    best_val_tx_acc = 0\n","    best_val_wallet_acc = 0\n","\n","    best_val_tx_loss = float('inf')\n","    best_val_wallet_loss = float('inf')\n","    patience = params['patience']\n","    epochs_since_best = 0\n","\n","    for epoch in range(params['num_epoch']):\n","        params['epoch'] = epoch+1\n","        optimizer.zero_grad()\n","        out_tx, out_wallet = model(data.x_dict, data.edge_index_dict)\n","        loss, params_tx, params_wallet = eval(model, data, out_tx, out_wallet, params)\n","\n","        val_tx_loss = params_tx['val_loss']\n","        val_wallet_loss = params_wallet['val_loss']\n","        val_tx_acc = params_tx['val_balanced_acc']\n","        val_wallet_acc = params_wallet['val_balanced_acc']\n","\n","        # Check if validation loss has improved\n","        if val_tx_loss < best_val_tx_loss or val_wallet_loss < best_val_wallet_loss:\n","            best_val_tx_loss = val_tx_loss\n","            best_val_wallet_loss = val_wallet_loss\n","            epochs_since_best = 0\n","        else:\n","            epochs_since_best += 1\n","\n","        # Check if early stopping criteria is met\n","        if epochs_since_best >= patience:\n","            print(f'Early stopping at epoch {epoch}')\n","            append_and_save_results(FILEPATH_TX, FILEPATH_WALLET, params_tx, params_wallet, True)\n","            out_tx, out_wallet = best_model(data.x_dict, data.edge_index_dict)\n","            eval_total(best_model, data, out_tx, out_wallet, params, best_epoch)\n","            return best_model\n","\n","        if type_classification == 'w':\n","          if best_val_wallet_acc < val_wallet_acc:\n","            best_val_wallet_acc = val_wallet_acc\n","            best_model = copy.deepcopy(model)\n","            best_epoch = epoch+1\n","\n","        elif type_classification == 'tx':\n","          if best_val_tx_acc < val_tx_acc:\n","            best_val_tx_acc = val_tx_acc\n","            best_model = copy.deepcopy(model)\n","            best_epoch = epoch+1\n","\n","        else:\n","          print('Definisci modello da considerare')\n","          raise ValueError\n","\n","        loss.backward()\n","        optimizer.step()\n","        #scheduler.step()\n","        scheduler.step(loss)\n","\n","        append_and_save_results(FILEPATH_TX, FILEPATH_WALLET, params_tx, params_wallet, params['epoch']==params['num_epoch'])\n","\n","    out_tx, out_wallet = best_model(data.x_dict, data.edge_index_dict)\n","    eval_total(best_model, data, out_tx, out_wallet, params, best_epoch)\n","    return model\n","\n","\n","def train_grid(data_full, param_grid, scalers, dim_reductions, pca_thresholds):\n","    best_model = None\n","    best_f1 = 0\n","\n","    keys, values = zip(*param_grid.items())\n","    param_combinations = [dict(zip(keys, v)) for v in product(*values)]\n","    combination_counter = 0\n","    total_combinations = len(param_combinations) * len(scalers) * len(dim_reductions) * len(pca_thresholds)\n","\n","    for scaler in scalers:\n","      data = scale_features(data_full.clone(), scaler)\n","      for dim_reduction in dim_reductions:\n","        for pca_threshold in pca_thresholds:\n","          data = dimentional_reduction(data, dim_reduction, pca_threshold)\n","\n","          for params in param_combinations:\n","            combination_counter += 1\n","\n","            set_seed(SEED)\n","            params['scaler'] = scaler\n","            params['dim_reduction'] = dim_reduction # Fixed the typo here: 'dim_reduction' instead of 'dim_reducition'\n","\n","            if params['lr_scheduler'] != 'ReduceLROnPlateau':\n","              params['p'] = None\n","              params['factor'] = None\n","            elif params['lr_scheduler'] != 'CosineAnnealingLR':\n","              params['T_max'] = None\n","              params['eta_min'] = None\n","\n","            if params['conv_type'] != 'Transformer':\n","              params['num_head'] = None\n","\n","            if dim_reduction == 'no':\n","              params['pca_threshold'] = None\n","            else:\n","              params['pca_threshold'] = pca_threshold\n","\n","            if True: #not is_combination_tested(path_comb, params):\n","              print(f\"  Combinazione {combination_counter}/{total_combinations}\")  # Print the counter\n","              model = None\n","              if params[ 'type_model'] == 'HeteroGNN':\n","                model = HeteroGNN(params['conv_type'], hidden_channels = params['hidden_channels'], num_layers = params['num_layers'],\n","                                  aggr=params['aggr'], dropout_prob=params['dropout'], num_head=params['num_head'])\n","              elif params[ 'type_model'] == 'ResidualHeteroGNN':\n","                model = ResidualHeteroGNN(params['conv_type'], hidden_channels = params['hidden_channels'], num_layers = params['num_layers'],\n","                                  aggr=params['aggr'], dropout_prob=params['dropout'], num_head=params['num_head'])\n","              model = train(model, data, params)\n","            else:\n","              print(f\"  Configurazione {combination_counter}/{total_combinations} già testata, salto...\")\n","    return best_model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zOYfyiGS4aMO"},"outputs":[],"source":["set_seed(SEED)\n","data = data_to_pyg(*load_data())"]},{"cell_type":"markdown","source":["# risultati"],"metadata":{"id":"TlvEdSRDrpw6"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"z9-FN_UQSDjr","outputId":"b46fc22f-4588-4422-b317-d2dd5774a031"},"outputs":[{"name":"stdout","output_type":"stream","text":["  Numero di componenti principali per tx: 73\n","  Numero di componenti principali per wallet: 22\n","  Combinazione 1/1\n","Combinazione: {'hidden_channels': 64, 'num_head': 2, 'num_layers': 2, 'num_epoch': 300, 'patience': 50, 'lr': 0.001, 'weight_decay': 0.0005, 'dropout': 0, 'conv_type': 'Transformer', 'p': 10, 'factor': 0.2, 'eta_min': None, 'T_max': None, 'aggr': 'sum', 'lr_scheduler': 'ReduceLROnPlateau', 'optimizer': 'Adam', 'type_model': 'HeteroGNN', 'scaler': 'standard_l2', 'dim_reduction': 'pca', 'pca_threshold': 0.99}\n","Epoch 001:      TX: Train Loss: 0.6885, Acc: 0.7995, F1: 0.8846 Bal: 0.5802 - Val Loss: 0.6886, Accuracy: 0.7984, F1: 0.8840 Bal: 0.5778\n","           WALLETS: Train Loss: 0.70094252, Acc: 0.08751687, F1: 0.02269512 Bal: 0.5021 - Val Loss: 0.70045346, Accuracy: 0.0889, F1: 0.0225 Bal: 0.5016\n","Epoch 002:      TX: Train Loss: 0.6806, Acc: 0.7455, F1: 0.8427 Bal: 0.6978 - Val Loss: 0.6809, Accuracy: 0.7473, F1: 0.8441 Bal: 0.6977\n","           WALLETS: Train Loss: 0.68554467, Acc: 0.57658089, F1: 0.71393131 Bal: 0.5976 - Val Loss: 0.68566179, Accuracy: 0.5806, F1: 0.7168 Bal: 0.6034\n","Epoch 003:      TX: Train Loss: 0.6721, Acc: 0.7481, F1: 0.8429 Bal: 0.7373 - Val Loss: 0.6727, Accuracy: 0.7427, F1: 0.8392 Bal: 0.7295\n","           WALLETS: Train Loss: 0.67386585, Acc: 0.83966125, F1: 0.91044685 Bal: 0.6006 - Val Loss: 0.67441541, Accuracy: 0.8393, F1: 0.9102 Bal: 0.5993\n","Epoch 004:      TX: Train Loss: 0.6625, Acc: 0.7760, F1: 0.8625 Bal: 0.7594 - Val Loss: 0.6633, Accuracy: 0.7753, F1: 0.8621 Bal: 0.7565\n","           WALLETS: Train Loss: 0.66405755, Acc: 0.90410879, F1: 0.94868110 Bal: 0.5952 - Val Loss: 0.66485804, Accuracy: 0.9029, F1: 0.9480 Bal: 0.5933\n","Epoch 005:      TX: Train Loss: 0.6518, Acc: 0.8032, F1: 0.8812 Bal: 0.7744 - Val Loss: 0.6529, Accuracy: 0.8028, F1: 0.8810 Bal: 0.7717\n","           WALLETS: Train Loss: 0.65453327, Acc: 0.91626391, F1: 0.95555102 Bal: 0.5924 - Val Loss: 0.65540767, Accuracy: 0.9154, F1: 0.9551 Bal: 0.5907\n","Epoch 006:      TX: Train Loss: 0.6399, Acc: 0.8222, F1: 0.8938 Bal: 0.7852 - Val Loss: 0.6412, Accuracy: 0.8260, F1: 0.8966 Bal: 0.7807\n","           WALLETS: Train Loss: 0.64463842, Acc: 0.91706579, F1: 0.95590814 Bal: 0.6038 - Val Loss: 0.64544988, Accuracy: 0.9160, F1: 0.9553 Bal: 0.6041\n","Epoch 007:      TX: Train Loss: 0.6267, Acc: 0.8330, F1: 0.9009 Bal: 0.7921 - Val Loss: 0.6283, Accuracy: 0.8333, F1: 0.9013 Bal: 0.7847\n","           WALLETS: Train Loss: 0.63428682, Acc: 0.91424653, F1: 0.95396141 Bal: 0.6480 - Val Loss: 0.63494188, Accuracy: 0.9147, F1: 0.9542 Bal: 0.6519\n","Epoch 008:      TX: Train Loss: 0.6122, Acc: 0.8374, F1: 0.9036 Bal: 0.7985 - Val Loss: 0.6142, Accuracy: 0.8366, F1: 0.9034 Bal: 0.7895\n","           WALLETS: Train Loss: 0.62362963, Acc: 0.90466394, F1: 0.94804221 Bal: 0.6966 - Val Loss: 0.62406921, Accuracy: 0.9049, F1: 0.9481 Bal: 0.6992\n","Epoch 009:      TX: Train Loss: 0.5965, Acc: 0.8358, F1: 0.9024 Bal: 0.8027 - Val Loss: 0.5990, Accuracy: 0.8357, F1: 0.9026 Bal: 0.7978\n","           WALLETS: Train Loss: 0.61279702, Acc: 0.88997620, F1: 0.93905329 Bal: 0.7328 - Val Loss: 0.61299628, Accuracy: 0.8910, F1: 0.9396 Bal: 0.7360\n","Epoch 010:      TX: Train Loss: 0.5796, Acc: 0.8301, F1: 0.8986 Bal: 0.8061 - Val Loss: 0.5828, Accuracy: 0.8322, F1: 0.9001 Bal: 0.8037\n","           WALLETS: Train Loss: 0.60185421, Acc: 0.87185600, F1: 0.92793875 Bal: 0.7491 - Val Loss: 0.60180598, Accuracy: 0.8738, F1: 0.9290 Bal: 0.7535\n","Epoch 011:      TX: Train Loss: 0.5618, Acc: 0.8250, F1: 0.8951 Bal: 0.8087 - Val Loss: 0.5655, Accuracy: 0.8276, F1: 0.8968 Bal: 0.8090\n","           WALLETS: Train Loss: 0.59070861, Acc: 0.85656957, F1: 0.91835276 Bal: 0.7594 - Val Loss: 0.59044707, Accuracy: 0.8587, F1: 0.9196 Bal: 0.7608\n","Epoch 012:      TX: Train Loss: 0.5429, Acc: 0.8217, F1: 0.8928 Bal: 0.8096 - Val Loss: 0.5472, Accuracy: 0.8225, F1: 0.8935 Bal: 0.8062\n","           WALLETS: Train Loss: 0.57925099, Acc: 0.84753124, F1: 0.91258100 Bal: 0.7650 - Val Loss: 0.57883728, Accuracy: 0.8505, F1: 0.9143 Bal: 0.7678\n","Epoch 013:      TX: Train Loss: 0.5233, Acc: 0.8215, F1: 0.8926 Bal: 0.8104 - Val Loss: 0.5281, Accuracy: 0.8234, F1: 0.8940 Bal: 0.8087\n","           WALLETS: Train Loss: 0.56745625, Acc: 0.84556465, F1: 0.91126404 Bal: 0.7691 - Val Loss: 0.56695080, Accuracy: 0.8486, F1: 0.9130 Bal: 0.7712\n","Epoch 014:      TX: Train Loss: 0.5030, Acc: 0.8246, F1: 0.8947 Bal: 0.8121 - Val Loss: 0.5084, Accuracy: 0.8265, F1: 0.8960 Bal: 0.8123\n","           WALLETS: Train Loss: 0.55544055, Acc: 0.84771992, F1: 0.91259609 Bal: 0.7712 - Val Loss: 0.55487680, Accuracy: 0.8511, F1: 0.9146 Bal: 0.7741\n","Epoch 015:      TX: Train Loss: 0.4823, Acc: 0.8294, F1: 0.8978 Bal: 0.8148 - Val Loss: 0.4883, Accuracy: 0.8326, F1: 0.9001 Bal: 0.8148\n","           WALLETS: Train Loss: 0.54344332, Acc: 0.85229169, F1: 0.91544273 Bal: 0.7736 - Val Loss: 0.54284704, Accuracy: 0.8548, F1: 0.9169 Bal: 0.7749\n","Epoch 016:      TX: Train Loss: 0.4618, Acc: 0.8347, F1: 0.9013 Bal: 0.8181 - Val Loss: 0.4683, Accuracy: 0.8390, F1: 0.9042 Bal: 0.8193\n","           WALLETS: Train Loss: 0.53174508, Acc: 0.85684533, F1: 0.91829203 Bal: 0.7742 - Val Loss: 0.53112358, Accuracy: 0.8590, F1: 0.9195 Bal: 0.7747\n","Epoch 017:      TX: Train Loss: 0.4416, Acc: 0.8386, F1: 0.9039 Bal: 0.8203 - Val Loss: 0.4486, Accuracy: 0.8451, F1: 0.9081 Bal: 0.8246\n","           WALLETS: Train Loss: 0.52050471, Acc: 0.86036850, F1: 0.92045105 Bal: 0.7769 - Val Loss: 0.51983827, Accuracy: 0.8619, F1: 0.9213 Bal: 0.7776\n","Epoch 018:      TX: Train Loss: 0.4222, Acc: 0.8405, F1: 0.9051 Bal: 0.8226 - Val Loss: 0.4296, Accuracy: 0.8469, F1: 0.9092 Bal: 0.8276\n","           WALLETS: Train Loss: 0.50979137, Acc: 0.86164207, F1: 0.92118394 Bal: 0.7808 - Val Loss: 0.50902480, Accuracy: 0.8632, F1: 0.9221 Bal: 0.7821\n","Epoch 019:      TX: Train Loss: 0.4040, Acc: 0.8405, F1: 0.9050 Bal: 0.8251 - Val Loss: 0.4115, Accuracy: 0.8469, F1: 0.9091 Bal: 0.8325\n","           WALLETS: Train Loss: 0.49972361, Acc: 0.86099984, F1: 0.92074191 Bal: 0.7836 - Val Loss: 0.49878100, Accuracy: 0.8619, F1: 0.9212 Bal: 0.7845\n","Epoch 020:      TX: Train Loss: 0.3871, Acc: 0.8422, F1: 0.9061 Bal: 0.8290 - Val Loss: 0.3946, Accuracy: 0.8471, F1: 0.9092 Bal: 0.8356\n","           WALLETS: Train Loss: 0.49054322, Acc: 0.85907679, F1: 0.91947245 Bal: 0.7880 - Val Loss: 0.48938221, Accuracy: 0.8600, F1: 0.9199 Bal: 0.7895\n","Epoch 021:      TX: Train Loss: 0.3717, Acc: 0.8445, F1: 0.9075 Bal: 0.8322 - Val Loss: 0.3792, Accuracy: 0.8488, F1: 0.9103 Bal: 0.8375\n","           WALLETS: Train Loss: 0.48244342, Acc: 0.85762906, F1: 0.91852507 Bal: 0.7905 - Val Loss: 0.48106429, Accuracy: 0.8592, F1: 0.9194 Bal: 0.7924\n","Epoch 022:      TX: Train Loss: 0.3579, Acc: 0.8479, F1: 0.9096 Bal: 0.8369 - Val Loss: 0.3652, Accuracy: 0.8526, F1: 0.9127 Bal: 0.8396\n","           WALLETS: Train Loss: 0.47542700, Acc: 0.85777783, F1: 0.91857960 Bal: 0.7930 - Val Loss: 0.47387215, Accuracy: 0.8590, F1: 0.9192 Bal: 0.7951\n","Epoch 023:      TX: Train Loss: 0.3456, Acc: 0.8523, F1: 0.9125 Bal: 0.8412 - Val Loss: 0.3527, Accuracy: 0.8554, F1: 0.9145 Bal: 0.8431\n","           WALLETS: Train Loss: 0.46940020, Acc: 0.86110869, F1: 0.92060819 Bal: 0.7967 - Val Loss: 0.46773061, Accuracy: 0.8620, F1: 0.9211 Bal: 0.7982\n","Epoch 024:      TX: Train Loss: 0.3349, Acc: 0.8565, F1: 0.9151 Bal: 0.8458 - Val Loss: 0.3415, Accuracy: 0.8591, F1: 0.9168 Bal: 0.8491\n","           WALLETS: Train Loss: 0.46434522, Acc: 0.86385176, F1: 0.92231022 Bal: 0.7974 - Val Loss: 0.46261728, Accuracy: 0.8643, F1: 0.9225 Bal: 0.7981\n","Epoch 025:      TX: Train Loss: 0.3255, Acc: 0.8599, F1: 0.9172 Bal: 0.8502 - Val Loss: 0.3316, Accuracy: 0.8633, F1: 0.9194 Bal: 0.8544\n","           WALLETS: Train Loss: 0.46026763, Acc: 0.86609411, F1: 0.92369750 Bal: 0.7979 - Val Loss: 0.45850405, Accuracy: 0.8665, F1: 0.9239 Bal: 0.7981\n","Epoch 026:      TX: Train Loss: 0.3174, Acc: 0.8623, F1: 0.9187 Bal: 0.8543 - Val Loss: 0.3227, Accuracy: 0.8651, F1: 0.9204 Bal: 0.8603\n","           WALLETS: Train Loss: 0.45704260, Acc: 0.86601065, F1: 0.92363084 Bal: 0.7990 - Val Loss: 0.45521721, Accuracy: 0.8664, F1: 0.9238 Bal: 0.7983\n","Epoch 027:      TX: Train Loss: 0.3104, Acc: 0.8649, F1: 0.9203 Bal: 0.8590 - Val Loss: 0.3148, Accuracy: 0.8686, F1: 0.9226 Bal: 0.8652\n","           WALLETS: Train Loss: 0.45439711, Acc: 0.86465363, F1: 0.92277626 Bal: 0.7997 - Val Loss: 0.45246586, Accuracy: 0.8652, F1: 0.9230 Bal: 0.7994\n","Epoch 028:      TX: Train Loss: 0.3043, Acc: 0.8670, F1: 0.9216 Bal: 0.8625 - Val Loss: 0.3080, Accuracy: 0.8714, F1: 0.9244 Bal: 0.8677\n","           WALLETS: Train Loss: 0.45219955, Acc: 0.86159490, F1: 0.92088119 Bal: 0.7988 - Val Loss: 0.45012477, Accuracy: 0.8621, F1: 0.9211 Bal: 0.7976\n","Epoch 029:      TX: Train Loss: 0.2991, Acc: 0.8712, F1: 0.9242 Bal: 0.8670 - Val Loss: 0.3019, Accuracy: 0.8745, F1: 0.9263 Bal: 0.8694\n","           WALLETS: Train Loss: 0.45036194, Acc: 0.85679816, F1: 0.91790314 Bal: 0.7969 - Val Loss: 0.44815862, Accuracy: 0.8570, F1: 0.9179 Bal: 0.7953\n","Epoch 030:      TX: Train Loss: 0.2947, Acc: 0.8741, F1: 0.9260 Bal: 0.8702 - Val Loss: 0.2966, Accuracy: 0.8771, F1: 0.9280 Bal: 0.8709\n","           WALLETS: Train Loss: 0.44865352, Acc: 0.85380473, F1: 0.91603104 Bal: 0.7960 - Val Loss: 0.44638282, Accuracy: 0.8537, F1: 0.9159 Bal: 0.7938\n","Epoch 031:      TX: Train Loss: 0.2909, Acc: 0.8768, F1: 0.9277 Bal: 0.8739 - Val Loss: 0.2920, Accuracy: 0.8800, F1: 0.9297 Bal: 0.8745\n","           WALLETS: Train Loss: 0.44686157, Acc: 0.85337296, F1: 0.91564012 Bal: 0.8032 - Val Loss: 0.44459733, Accuracy: 0.8534, F1: 0.9156 Bal: 0.8004\n","Epoch 032:      TX: Train Loss: 0.2875, Acc: 0.8790, F1: 0.9290 Bal: 0.8763 - Val Loss: 0.2878, Accuracy: 0.8817, F1: 0.9308 Bal: 0.8774\n","           WALLETS: Train Loss: 0.44491693, Acc: 0.85316251, F1: 0.91550704 Bal: 0.8032 - Val Loss: 0.44271672, Accuracy: 0.8536, F1: 0.9157 Bal: 0.8005\n","Epoch 033:      TX: Train Loss: 0.2844, Acc: 0.8809, F1: 0.9302 Bal: 0.8785 - Val Loss: 0.2842, Accuracy: 0.8813, F1: 0.9305 Bal: 0.8781\n","           WALLETS: Train Loss: 0.44279054, Acc: 0.85295932, F1: 0.91537917 Bal: 0.8031 - Val Loss: 0.44066906, Accuracy: 0.8532, F1: 0.9155 Bal: 0.8006\n","Epoch 034:      TX: Train Loss: 0.2815, Acc: 0.8825, F1: 0.9311 Bal: 0.8806 - Val Loss: 0.2809, Accuracy: 0.8835, F1: 0.9318 Bal: 0.8803\n","           WALLETS: Train Loss: 0.44042414, Acc: 0.85213567, F1: 0.91486197 Bal: 0.8028 - Val Loss: 0.43836641, Accuracy: 0.8523, F1: 0.9149 Bal: 0.8004\n","Epoch 035:      TX: Train Loss: 0.2786, Acc: 0.8843, F1: 0.9323 Bal: 0.8821 - Val Loss: 0.2779, Accuracy: 0.8864, F1: 0.9336 Bal: 0.8829\n","           WALLETS: Train Loss: 0.43785542, Acc: 0.85182363, F1: 0.91466340 Bal: 0.8029 - Val Loss: 0.43583938, Accuracy: 0.8521, F1: 0.9148 Bal: 0.8005\n","Epoch 036:      TX: Train Loss: 0.2757, Acc: 0.8856, F1: 0.9331 Bal: 0.8830 - Val Loss: 0.2752, Accuracy: 0.8866, F1: 0.9338 Bal: 0.8811\n","           WALLETS: Train Loss: 0.43520775, Acc: 0.85192523, F1: 0.91472690 Bal: 0.8029 - Val Loss: 0.43323594, Accuracy: 0.8521, F1: 0.9148 Bal: 0.8005\n","Epoch 037:      TX: Train Loss: 0.2727, Acc: 0.8865, F1: 0.9336 Bal: 0.8839 - Val Loss: 0.2725, Accuracy: 0.8864, F1: 0.9337 Bal: 0.8800\n","           WALLETS: Train Loss: 0.43255728, Acc: 0.85264728, F1: 0.91518046 Bal: 0.8032 - Val Loss: 0.43066463, Accuracy: 0.8529, F1: 0.9153 Bal: 0.8005\n","Epoch 038:      TX: Train Loss: 0.2696, Acc: 0.8878, F1: 0.9345 Bal: 0.8855 - Val Loss: 0.2700, Accuracy: 0.8866, F1: 0.9338 Bal: 0.8811\n","           WALLETS: Train Loss: 0.42996630, Acc: 0.85491865, F1: 0.91660114 Bal: 0.8042 - Val Loss: 0.42819992, Accuracy: 0.8551, F1: 0.9167 Bal: 0.8013\n","Epoch 039:      TX: Train Loss: 0.2665, Acc: 0.8888, F1: 0.9350 Bal: 0.8875 - Val Loss: 0.2676, Accuracy: 0.8857, F1: 0.9332 Bal: 0.8806\n","           WALLETS: Train Loss: 0.42754406, Acc: 0.85844908, F1: 0.91879673 Bal: 0.8060 - Val Loss: 0.42592102, Accuracy: 0.8585, F1: 0.9187 Bal: 0.8031\n","Epoch 040:      TX: Train Loss: 0.2633, Acc: 0.8900, F1: 0.9357 Bal: 0.8888 - Val Loss: 0.2653, Accuracy: 0.8866, F1: 0.9338 Bal: 0.8820\n","           WALLETS: Train Loss: 0.42533836, Acc: 0.86087647, F1: 0.92030421 Bal: 0.8070 - Val Loss: 0.42382702, Accuracy: 0.8609, F1: 0.9203 Bal: 0.8046\n","Epoch 041:      TX: Train Loss: 0.2601, Acc: 0.8915, F1: 0.9367 Bal: 0.8903 - Val Loss: 0.2631, Accuracy: 0.8888, F1: 0.9351 Bal: 0.8833\n","           WALLETS: Train Loss: 0.42333001, Acc: 0.86228066, F1: 0.92117330 Bal: 0.8077 - Val Loss: 0.42187053, Accuracy: 0.8622, F1: 0.9210 Bal: 0.8056\n","Epoch 042:      TX: Train Loss: 0.2570, Acc: 0.8921, F1: 0.9371 Bal: 0.8907 - Val Loss: 0.2611, Accuracy: 0.8903, F1: 0.9361 Bal: 0.8841\n","           WALLETS: Train Loss: 0.42152825, Acc: 0.86356149, F1: 0.92196621 Bal: 0.8082 - Val Loss: 0.42006528, Accuracy: 0.8635, F1: 0.9218 Bal: 0.8067\n","Epoch 043:      TX: Train Loss: 0.2539, Acc: 0.8921, F1: 0.9370 Bal: 0.8911 - Val Loss: 0.2592, Accuracy: 0.8914, F1: 0.9367 Bal: 0.8857\n","           WALLETS: Train Loss: 0.41991186, Acc: 0.86558250, F1: 0.92321722 Bal: 0.8089 - Val Loss: 0.41841871, Accuracy: 0.8653, F1: 0.9230 Bal: 0.8067\n","Epoch 044:      TX: Train Loss: 0.2510, Acc: 0.8928, F1: 0.9375 Bal: 0.8919 - Val Loss: 0.2574, Accuracy: 0.8916, F1: 0.9369 Bal: 0.8858\n","           WALLETS: Train Loss: 0.41840720, Acc: 0.86666376, F1: 0.92388693 Bal: 0.8092 - Val Loss: 0.41688210, Accuracy: 0.8662, F1: 0.9235 Bal: 0.8070\n","Epoch 045:      TX: Train Loss: 0.2482, Acc: 0.8941, F1: 0.9383 Bal: 0.8931 - Val Loss: 0.2557, Accuracy: 0.8925, F1: 0.9374 Bal: 0.8863\n","           WALLETS: Train Loss: 0.41698772, Acc: 0.86722254, F1: 0.92423163 Bal: 0.8093 - Val Loss: 0.41542450, Accuracy: 0.8670, F1: 0.9240 Bal: 0.8071\n","Epoch 046:      TX: Train Loss: 0.2455, Acc: 0.8953, F1: 0.9390 Bal: 0.8951 - Val Loss: 0.2542, Accuracy: 0.8945, F1: 0.9386 Bal: 0.8894\n","           WALLETS: Train Loss: 0.41561893, Acc: 0.86744387, F1: 0.92436342 Bal: 0.8097 - Val Loss: 0.41397941, Accuracy: 0.8673, F1: 0.9242 Bal: 0.8080\n","Epoch 047:      TX: Train Loss: 0.2429, Acc: 0.8962, F1: 0.9396 Bal: 0.8955 - Val Loss: 0.2527, Accuracy: 0.8960, F1: 0.9396 Bal: 0.8902\n","           WALLETS: Train Loss: 0.41425085, Acc: 0.86660208, F1: 0.92383642 Bal: 0.8100 - Val Loss: 0.41246590, Accuracy: 0.8670, F1: 0.9240 Bal: 0.8089\n","Epoch 048:      TX: Train Loss: 0.2404, Acc: 0.8969, F1: 0.9400 Bal: 0.8964 - Val Loss: 0.2512, Accuracy: 0.8971, F1: 0.9402 Bal: 0.8908\n","           WALLETS: Train Loss: 0.41287774, Acc: 0.86490036, F1: 0.92278020 Bal: 0.8097 - Val Loss: 0.41090003, Accuracy: 0.8650, F1: 0.9227 Bal: 0.8092\n","Epoch 049:      TX: Train Loss: 0.2380, Acc: 0.8979, F1: 0.9406 Bal: 0.8979 - Val Loss: 0.2496, Accuracy: 0.8969, F1: 0.9401 Bal: 0.8897\n","           WALLETS: Train Loss: 0.41150117, Acc: 0.86316236, F1: 0.92169862 Bal: 0.8094 - Val Loss: 0.40932229, Accuracy: 0.8641, F1: 0.9222 Bal: 0.8094\n","Epoch 050:      TX: Train Loss: 0.2355, Acc: 0.8994, F1: 0.9415 Bal: 0.8992 - Val Loss: 0.2480, Accuracy: 0.8984, F1: 0.9410 Bal: 0.8925\n","           WALLETS: Train Loss: 0.41011569, Acc: 0.86213190, F1: 0.92106865 Bal: 0.8085 - Val Loss: 0.40775508, Accuracy: 0.8629, F1: 0.9214 Bal: 0.8082\n","Epoch 051:      TX: Train Loss: 0.2331, Acc: 0.9010, F1: 0.9425 Bal: 0.9011 - Val Loss: 0.2464, Accuracy: 0.9004, F1: 0.9422 Bal: 0.8936\n","           WALLETS: Train Loss: 0.40874463, Acc: 0.86202668, F1: 0.92100759 Bal: 0.8082 - Val Loss: 0.40621617, Accuracy: 0.8630, F1: 0.9215 Bal: 0.8079\n","Epoch 052:      TX: Train Loss: 0.2306, Acc: 0.9028, F1: 0.9436 Bal: 0.9029 - Val Loss: 0.2446, Accuracy: 0.9019, F1: 0.9432 Bal: 0.8945\n","           WALLETS: Train Loss: 0.40738937, Acc: 0.86166746, F1: 0.92078334 Bal: 0.8081 - Val Loss: 0.40468606, Accuracy: 0.8624, F1: 0.9211 Bal: 0.8075\n","Epoch 053:      TX: Train Loss: 0.2282, Acc: 0.9041, F1: 0.9444 Bal: 0.9048 - Val Loss: 0.2427, Accuracy: 0.9032, F1: 0.9440 Bal: 0.8942\n","           WALLETS: Train Loss: 0.40604296, Acc: 0.86096718, F1: 0.92034375 Bal: 0.8082 - Val Loss: 0.40315041, Accuracy: 0.8613, F1: 0.9205 Bal: 0.8075\n","Epoch 054:      TX: Train Loss: 0.2257, Acc: 0.9056, F1: 0.9452 Bal: 0.9059 - Val Loss: 0.2407, Accuracy: 0.9050, F1: 0.9451 Bal: 0.8952\n","           WALLETS: Train Loss: 0.40472886, Acc: 0.86070594, F1: 0.92017682 Bal: 0.8084 - Val Loss: 0.40166393, Accuracy: 0.8611, F1: 0.9203 Bal: 0.8077\n","Epoch 055:      TX: Train Loss: 0.2231, Acc: 0.9070, F1: 0.9461 Bal: 0.9070 - Val Loss: 0.2386, Accuracy: 0.9074, F1: 0.9465 Bal: 0.8975\n","           WALLETS: Train Loss: 0.40344036, Acc: 0.86144613, F1: 0.92063433 Bal: 0.8088 - Val Loss: 0.40024945, Accuracy: 0.8619, F1: 0.9208 Bal: 0.8083\n","Epoch 056:      TX: Train Loss: 0.2206, Acc: 0.9090, F1: 0.9473 Bal: 0.9074 - Val Loss: 0.2366, Accuracy: 0.9087, F1: 0.9473 Bal: 0.8983\n","           WALLETS: Train Loss: 0.40218377, Acc: 0.86340184, F1: 0.92185512 Bal: 0.8090 - Val Loss: 0.39891663, Accuracy: 0.8638, F1: 0.9220 Bal: 0.8087\n","Epoch 057:      TX: Train Loss: 0.2181, Acc: 0.9112, F1: 0.9487 Bal: 0.9088 - Val Loss: 0.2345, Accuracy: 0.9105, F1: 0.9484 Bal: 0.8992\n","           WALLETS: Train Loss: 0.40096539, Acc: 0.86483868, F1: 0.92274638 Bal: 0.8094 - Val Loss: 0.39763963, Accuracy: 0.8652, F1: 0.9228 Bal: 0.8093\n","Epoch 058:      TX: Train Loss: 0.2155, Acc: 0.9130, F1: 0.9497 Bal: 0.9103 - Val Loss: 0.2324, Accuracy: 0.9136, F1: 0.9502 Bal: 0.9019\n","           WALLETS: Train Loss: 0.39977881, Acc: 0.86561153, F1: 0.92321948 Bal: 0.8100 - Val Loss: 0.39639911, Accuracy: 0.8654, F1: 0.9230 Bal: 0.8090\n","Epoch 059:      TX: Train Loss: 0.2130, Acc: 0.9153, F1: 0.9512 Bal: 0.9118 - Val Loss: 0.2304, Accuracy: 0.9147, F1: 0.9509 Bal: 0.9025\n","           WALLETS: Train Loss: 0.39862877, Acc: 0.86631907, F1: 0.92365079 Bal: 0.8106 - Val Loss: 0.39521569, Accuracy: 0.8659, F1: 0.9233 Bal: 0.8091\n","Epoch 060:      TX: Train Loss: 0.2104, Acc: 0.9167, F1: 0.9520 Bal: 0.9129 - Val Loss: 0.2284, Accuracy: 0.9179, F1: 0.9529 Bal: 0.9024\n","           WALLETS: Train Loss: 0.39750588, Acc: 0.86730599, F1: 0.92425777 Bal: 0.8111 - Val Loss: 0.39409870, Accuracy: 0.8671, F1: 0.9240 Bal: 0.8097\n","Epoch 061:      TX: Train Loss: 0.2079, Acc: 0.9188, F1: 0.9533 Bal: 0.9144 - Val Loss: 0.2265, Accuracy: 0.9190, F1: 0.9536 Bal: 0.9030\n","           WALLETS: Train Loss: 0.39640144, Acc: 0.86884080, F1: 0.92520650 Bal: 0.8114 - Val Loss: 0.39303762, Accuracy: 0.8689, F1: 0.9251 Bal: 0.8105\n","Epoch 062:      TX: Train Loss: 0.2054, Acc: 0.9201, F1: 0.9541 Bal: 0.9154 - Val Loss: 0.2247, Accuracy: 0.9206, F1: 0.9545 Bal: 0.9019\n","           WALLETS: Train Loss: 0.39530382, Acc: 0.86991118, F1: 0.92586826 Bal: 0.8116 - Val Loss: 0.39198428, Accuracy: 0.8698, F1: 0.9257 Bal: 0.8110\n","Epoch 063:      TX: Train Loss: 0.2028, Acc: 0.9222, F1: 0.9553 Bal: 0.9171 - Val Loss: 0.2229, Accuracy: 0.9212, F1: 0.9549 Bal: 0.9032\n","           WALLETS: Train Loss: 0.39419392, Acc: 0.87027402, F1: 0.92608970 Bal: 0.8118 - Val Loss: 0.39090362, Accuracy: 0.8699, F1: 0.9258 Bal: 0.8110\n","Epoch 064:      TX: Train Loss: 0.2003, Acc: 0.9237, F1: 0.9562 Bal: 0.9178 - Val Loss: 0.2211, Accuracy: 0.9223, F1: 0.9555 Bal: 0.9039\n","           WALLETS: Train Loss: 0.39306858, Acc: 0.87061871, F1: 0.92629721 Bal: 0.8123 - Val Loss: 0.38980454, Accuracy: 0.8699, F1: 0.9258 Bal: 0.8110\n","Epoch 065:      TX: Train Loss: 0.1977, Acc: 0.9251, F1: 0.9570 Bal: 0.9191 - Val Loss: 0.2195, Accuracy: 0.9232, F1: 0.9561 Bal: 0.9043\n","           WALLETS: Train Loss: 0.39193130, Acc: 0.87117749, F1: 0.92663978 Bal: 0.8125 - Val Loss: 0.38871065, Accuracy: 0.8707, F1: 0.9263 Bal: 0.8118\n","Epoch 066:      TX: Train Loss: 0.1951, Acc: 0.9261, F1: 0.9576 Bal: 0.9203 - Val Loss: 0.2178, Accuracy: 0.9241, F1: 0.9566 Bal: 0.9048\n","           WALLETS: Train Loss: 0.39077824, Acc: 0.87188502, F1: 0.92707329 Bal: 0.8128 - Val Loss: 0.38760558, Accuracy: 0.8712, F1: 0.9265 Bal: 0.8118\n","Epoch 067:      TX: Train Loss: 0.1925, Acc: 0.9272, F1: 0.9583 Bal: 0.9209 - Val Loss: 0.2161, Accuracy: 0.9250, F1: 0.9571 Bal: 0.9063\n","           WALLETS: Train Loss: 0.38960943, Acc: 0.87203742, F1: 0.92716485 Bal: 0.8130 - Val Loss: 0.38647148, Accuracy: 0.8711, F1: 0.9265 Bal: 0.8117\n","Epoch 068:      TX: Train Loss: 0.1899, Acc: 0.9287, F1: 0.9592 Bal: 0.9224 - Val Loss: 0.2146, Accuracy: 0.9256, F1: 0.9575 Bal: 0.9067\n","           WALLETS: Train Loss: 0.38843560, Acc: 0.87142422, F1: 0.92678573 Bal: 0.8130 - Val Loss: 0.38532510, Accuracy: 0.8703, F1: 0.9260 Bal: 0.8118\n","Epoch 069:      TX: Train Loss: 0.1873, Acc: 0.9299, F1: 0.9599 Bal: 0.9237 - Val Loss: 0.2131, Accuracy: 0.9263, F1: 0.9579 Bal: 0.9070\n","           WALLETS: Train Loss: 0.38726941, Acc: 0.87118111, F1: 0.92662502 Bal: 0.8137 - Val Loss: 0.38419458, Accuracy: 0.8700, F1: 0.9258 Bal: 0.8111\n","Epoch 070:      TX: Train Loss: 0.1847, Acc: 0.9310, F1: 0.9605 Bal: 0.9254 - Val Loss: 0.2115, Accuracy: 0.9272, F1: 0.9584 Bal: 0.9075\n","           WALLETS: Train Loss: 0.38611165, Acc: 0.87116660, F1: 0.92661007 Bal: 0.8141 - Val Loss: 0.38308334, Accuracy: 0.8702, F1: 0.9260 Bal: 0.8122\n","Epoch 071:      TX: Train Loss: 0.1821, Acc: 0.9322, F1: 0.9612 Bal: 0.9275 - Val Loss: 0.2100, Accuracy: 0.9287, F1: 0.9593 Bal: 0.9094\n","           WALLETS: Train Loss: 0.38496512, Acc: 0.87105412, F1: 0.92653583 Bal: 0.8144 - Val Loss: 0.38197118, Accuracy: 0.8700, F1: 0.9258 Bal: 0.8126\n","Epoch 072:      TX: Train Loss: 0.1794, Acc: 0.9329, F1: 0.9616 Bal: 0.9281 - Val Loss: 0.2086, Accuracy: 0.9291, F1: 0.9596 Bal: 0.9096\n","           WALLETS: Train Loss: 0.38381746, Acc: 0.87071668, F1: 0.92631784 Bal: 0.8151 - Val Loss: 0.38083819, Accuracy: 0.8701, F1: 0.9258 Bal: 0.8137\n","Epoch 073:      TX: Train Loss: 0.1768, Acc: 0.9340, F1: 0.9623 Bal: 0.9287 - Val Loss: 0.2071, Accuracy: 0.9307, F1: 0.9605 Bal: 0.9114\n","           WALLETS: Train Loss: 0.38265544, Acc: 0.87058969, F1: 0.92622852 Bal: 0.8158 - Val Loss: 0.37968194, Accuracy: 0.8699, F1: 0.9257 Bal: 0.8147\n","Epoch 074:      TX: Train Loss: 0.1742, Acc: 0.9348, F1: 0.9627 Bal: 0.9294 - Val Loss: 0.2057, Accuracy: 0.9318, F1: 0.9611 Bal: 0.9120\n","           WALLETS: Train Loss: 0.38147357, Acc: 0.87103961, F1: 0.92649899 Bal: 0.8164 - Val Loss: 0.37851739, Accuracy: 0.8704, F1: 0.9260 Bal: 0.8150\n","Epoch 075:      TX: Train Loss: 0.1716, Acc: 0.9365, F1: 0.9637 Bal: 0.9317 - Val Loss: 0.2043, Accuracy: 0.9337, F1: 0.9623 Bal: 0.9131\n","           WALLETS: Train Loss: 0.38027585, Acc: 0.87151856, F1: 0.92679014 Bal: 0.8168 - Val Loss: 0.37733862, Accuracy: 0.8708, F1: 0.9263 Bal: 0.8152\n","Epoch 076:      TX: Train Loss: 0.1690, Acc: 0.9376, F1: 0.9644 Bal: 0.9323 - Val Loss: 0.2030, Accuracy: 0.9344, F1: 0.9627 Bal: 0.9155\n","           WALLETS: Train Loss: 0.37906402, Acc: 0.87187414, F1: 0.92699698 Bal: 0.8177 - Val Loss: 0.37613797, Accuracy: 0.8711, F1: 0.9265 Bal: 0.8160\n","Epoch 077:      TX: Train Loss: 0.1665, Acc: 0.9390, F1: 0.9652 Bal: 0.9337 - Val Loss: 0.2017, Accuracy: 0.9348, F1: 0.9629 Bal: 0.9147\n","           WALLETS: Train Loss: 0.37784222, Acc: 0.87211361, F1: 0.92713583 Bal: 0.8184 - Val Loss: 0.37493220, Accuracy: 0.8714, F1: 0.9266 Bal: 0.8164\n","Epoch 078:      TX: Train Loss: 0.1639, Acc: 0.9401, F1: 0.9659 Bal: 0.9352 - Val Loss: 0.2005, Accuracy: 0.9355, F1: 0.9633 Bal: 0.9141\n","           WALLETS: Train Loss: 0.37662816, Acc: 0.87280664, F1: 0.92755899 Bal: 0.8188 - Val Loss: 0.37375087, Accuracy: 0.8719, F1: 0.9269 Bal: 0.8169\n","Epoch 079:      TX: Train Loss: 0.1614, Acc: 0.9408, F1: 0.9663 Bal: 0.9363 - Val Loss: 0.1994, Accuracy: 0.9373, F1: 0.9644 Bal: 0.9151\n","           WALLETS: Train Loss: 0.37541729, Acc: 0.87344160, F1: 0.92794788 Bal: 0.8191 - Val Loss: 0.37257931, Accuracy: 0.8725, F1: 0.9273 Bal: 0.8180\n","Epoch 080:      TX: Train Loss: 0.1589, Acc: 0.9419, F1: 0.9669 Bal: 0.9375 - Val Loss: 0.1983, Accuracy: 0.9386, F1: 0.9651 Bal: 0.9158\n","           WALLETS: Train Loss: 0.37420380, Acc: 0.87365568, F1: 0.92807258 Bal: 0.8196 - Val Loss: 0.37138921, Accuracy: 0.8727, F1: 0.9274 Bal: 0.8183\n","Epoch 081:      TX: Train Loss: 0.1564, Acc: 0.9427, F1: 0.9674 Bal: 0.9390 - Val Loss: 0.1973, Accuracy: 0.9397, F1: 0.9658 Bal: 0.9164\n","           WALLETS: Train Loss: 0.37297931, Acc: 0.87372099, F1: 0.92810352 Bal: 0.8203 - Val Loss: 0.37018901, Accuracy: 0.8728, F1: 0.9275 Bal: 0.8191\n","Epoch 082:      TX: Train Loss: 0.1539, Acc: 0.9437, F1: 0.9680 Bal: 0.9408 - Val Loss: 0.1963, Accuracy: 0.9414, F1: 0.9668 Bal: 0.9194\n","           WALLETS: Train Loss: 0.37174106, Acc: 0.87401852, F1: 0.92828122 Bal: 0.8207 - Val Loss: 0.36899063, Accuracy: 0.8731, F1: 0.9276 Bal: 0.8194\n","Epoch 083:      TX: Train Loss: 0.1514, Acc: 0.9446, F1: 0.9685 Bal: 0.9414 - Val Loss: 0.1953, Accuracy: 0.9423, F1: 0.9673 Bal: 0.9208\n","           WALLETS: Train Loss: 0.37049434, Acc: 0.87408020, F1: 0.92831056 Bal: 0.8214 - Val Loss: 0.36777908, Accuracy: 0.8731, F1: 0.9276 Bal: 0.8197\n","Epoch 084:      TX: Train Loss: 0.1489, Acc: 0.9454, F1: 0.9689 Bal: 0.9422 - Val Loss: 0.1944, Accuracy: 0.9430, F1: 0.9677 Bal: 0.9212\n","           WALLETS: Train Loss: 0.36924168, Acc: 0.87357586, F1: 0.92798905 Bal: 0.8221 - Val Loss: 0.36655399, Accuracy: 0.8727, F1: 0.9274 Bal: 0.8203\n","Epoch 085:      TX: Train Loss: 0.1465, Acc: 0.9465, F1: 0.9696 Bal: 0.9440 - Val Loss: 0.1935, Accuracy: 0.9432, F1: 0.9678 Bal: 0.9213\n","           WALLETS: Train Loss: 0.36798215, Acc: 0.87341258, F1: 0.92787861 Bal: 0.8228 - Val Loss: 0.36533177, Accuracy: 0.8725, F1: 0.9272 Bal: 0.8210\n","Epoch 086:      TX: Train Loss: 0.1441, Acc: 0.9476, F1: 0.9702 Bal: 0.9455 - Val Loss: 0.1926, Accuracy: 0.9434, F1: 0.9679 Bal: 0.9214\n","           WALLETS: Train Loss: 0.36672491, Acc: 0.87341621, F1: 0.92786890 Bal: 0.8236 - Val Loss: 0.36411640, Accuracy: 0.8723, F1: 0.9271 Bal: 0.8213\n","Epoch 087:      TX: Train Loss: 0.1417, Acc: 0.9491, F1: 0.9711 Bal: 0.9466 - Val Loss: 0.1918, Accuracy: 0.9438, F1: 0.9682 Bal: 0.9217\n","           WALLETS: Train Loss: 0.36547244, Acc: 0.87276672, F1: 0.92745246 Bal: 0.8247 - Val Loss: 0.36289397, Accuracy: 0.8717, F1: 0.9267 Bal: 0.8234\n","Epoch 088:      TX: Train Loss: 0.1394, Acc: 0.9500, F1: 0.9716 Bal: 0.9477 - Val Loss: 0.1910, Accuracy: 0.9438, F1: 0.9682 Bal: 0.9207\n","           WALLETS: Train Loss: 0.36422372, Acc: 0.87270141, F1: 0.92739509 Bal: 0.8259 - Val Loss: 0.36167857, Accuracy: 0.8718, F1: 0.9267 Bal: 0.8244\n","Epoch 089:      TX: Train Loss: 0.1370, Acc: 0.9511, F1: 0.9722 Bal: 0.9485 - Val Loss: 0.1902, Accuracy: 0.9449, F1: 0.9688 Bal: 0.9213\n","           WALLETS: Train Loss: 0.36297378, Acc: 0.87294451, F1: 0.92752879 Bal: 0.8271 - Val Loss: 0.36047757, Accuracy: 0.8722, F1: 0.9270 Bal: 0.8262\n","Epoch 090:      TX: Train Loss: 0.1347, Acc: 0.9521, F1: 0.9728 Bal: 0.9501 - Val Loss: 0.1896, Accuracy: 0.9456, F1: 0.9692 Bal: 0.9197\n","           WALLETS: Train Loss: 0.36172199, Acc: 0.87310054, F1: 0.92761074 Bal: 0.8281 - Val Loss: 0.35926145, Accuracy: 0.8725, F1: 0.9271 Bal: 0.8279\n","Epoch 091:      TX: Train Loss: 0.1325, Acc: 0.9530, F1: 0.9733 Bal: 0.9525 - Val Loss: 0.1889, Accuracy: 0.9458, F1: 0.9694 Bal: 0.9198\n","           WALLETS: Train Loss: 0.36047649, Acc: 0.87315496, F1: 0.92763415 Bal: 0.8289 - Val Loss: 0.35805383, Accuracy: 0.8726, F1: 0.9272 Bal: 0.8289\n","Epoch 092:      TX: Train Loss: 0.1303, Acc: 0.9535, F1: 0.9736 Bal: 0.9530 - Val Loss: 0.1884, Accuracy: 0.9462, F1: 0.9696 Bal: 0.9201\n","           WALLETS: Train Loss: 0.35923055, Acc: 0.87358311, F1: 0.92789155 Bal: 0.8294 - Val Loss: 0.35685602, Accuracy: 0.8727, F1: 0.9272 Bal: 0.8289\n","Epoch 093:      TX: Train Loss: 0.1281, Acc: 0.9543, F1: 0.9741 Bal: 0.9541 - Val Loss: 0.1880, Accuracy: 0.9462, F1: 0.9696 Bal: 0.9201\n","           WALLETS: Train Loss: 0.35798186, Acc: 0.87374639, F1: 0.92798126 Bal: 0.8302 - Val Loss: 0.35563856, Accuracy: 0.8730, F1: 0.9274 Bal: 0.8295\n","Epoch 094:      TX: Train Loss: 0.1259, Acc: 0.9555, F1: 0.9748 Bal: 0.9560 - Val Loss: 0.1876, Accuracy: 0.9465, F1: 0.9698 Bal: 0.9202\n","           WALLETS: Train Loss: 0.35673657, Acc: 0.87398224, F1: 0.92812010 Bal: 0.8307 - Val Loss: 0.35442704, Accuracy: 0.8735, F1: 0.9277 Bal: 0.8298\n","Epoch 095:      TX: Train Loss: 0.1238, Acc: 0.9563, F1: 0.9752 Bal: 0.9567 - Val Loss: 0.1874, Accuracy: 0.9469, F1: 0.9700 Bal: 0.9204\n","           WALLETS: Train Loss: 0.35549891, Acc: 0.87423622, F1: 0.92827062 Bal: 0.8312 - Val Loss: 0.35322073, Accuracy: 0.8739, F1: 0.9280 Bal: 0.8312\n","Epoch 096:      TX: Train Loss: 0.1217, Acc: 0.9571, F1: 0.9757 Bal: 0.9578 - Val Loss: 0.1871, Accuracy: 0.9476, F1: 0.9704 Bal: 0.9208\n","           WALLETS: Train Loss: 0.35427311, Acc: 0.87416003, F1: 0.92821216 Bal: 0.8320 - Val Loss: 0.35201389, Accuracy: 0.8739, F1: 0.9279 Bal: 0.8324\n","Epoch 097:      TX: Train Loss: 0.1197, Acc: 0.9580, F1: 0.9762 Bal: 0.9596 - Val Loss: 0.1868, Accuracy: 0.9478, F1: 0.9705 Bal: 0.9209\n","           WALLETS: Train Loss: 0.35305864, Acc: 0.87464260, F1: 0.92849914 Bal: 0.8329 - Val Loss: 0.35084969, Accuracy: 0.8742, F1: 0.9281 Bal: 0.8334\n","Epoch 098:      TX: Train Loss: 0.1177, Acc: 0.9586, F1: 0.9766 Bal: 0.9604 - Val Loss: 0.1867, Accuracy: 0.9482, F1: 0.9708 Bal: 0.9212\n","           WALLETS: Train Loss: 0.35185349, Acc: 0.87450472, F1: 0.92840509 Bal: 0.8335 - Val Loss: 0.34969050, Accuracy: 0.8742, F1: 0.9281 Bal: 0.8340\n","Epoch 099:      TX: Train Loss: 0.1157, Acc: 0.9594, F1: 0.9770 Bal: 0.9618 - Val Loss: 0.1864, Accuracy: 0.9484, F1: 0.9709 Bal: 0.9223\n","           WALLETS: Train Loss: 0.35065940, Acc: 0.87453738, F1: 0.92841527 Bal: 0.8342 - Val Loss: 0.34854904, Accuracy: 0.8740, F1: 0.9280 Bal: 0.8347\n","Epoch 100:      TX: Train Loss: 0.1138, Acc: 0.9602, F1: 0.9775 Bal: 0.9628 - Val Loss: 0.1865, Accuracy: 0.9487, F1: 0.9710 Bal: 0.9214\n","           WALLETS: Train Loss: 0.34947318, Acc: 0.87491110, F1: 0.92863397 Bal: 0.8352 - Val Loss: 0.34744450, Accuracy: 0.8743, F1: 0.9281 Bal: 0.8353\n","Epoch 101:      TX: Train Loss: 0.1119, Acc: 0.9604, F1: 0.9776 Bal: 0.9631 - Val Loss: 0.1863, Accuracy: 0.9480, F1: 0.9707 Bal: 0.9211\n","           WALLETS: Train Loss: 0.34829438, Acc: 0.87469340, F1: 0.92848075 Bal: 0.8365 - Val Loss: 0.34631851, Accuracy: 0.8740, F1: 0.9280 Bal: 0.8363\n","Epoch 102:      TX: Train Loss: 0.1100, Acc: 0.9614, F1: 0.9782 Bal: 0.9640 - Val Loss: 0.1866, Accuracy: 0.9484, F1: 0.9709 Bal: 0.9213\n","           WALLETS: Train Loss: 0.34712088, Acc: 0.87544811, F1: 0.92893623 Bal: 0.8373 - Val Loss: 0.34524372, Accuracy: 0.8746, F1: 0.9283 Bal: 0.8364\n","Epoch 103:      TX: Train Loss: 0.1082, Acc: 0.9617, F1: 0.9783 Bal: 0.9644 - Val Loss: 0.1864, Accuracy: 0.9484, F1: 0.9709 Bal: 0.9203\n","           WALLETS: Train Loss: 0.34595233, Acc: 0.87512881, F1: 0.92871686 Bal: 0.8389 - Val Loss: 0.34412491, Accuracy: 0.8744, F1: 0.9282 Bal: 0.8378\n","Epoch 104:      TX: Train Loss: 0.1065, Acc: 0.9629, F1: 0.9790 Bal: 0.9652 - Val Loss: 0.1870, Accuracy: 0.9487, F1: 0.9710 Bal: 0.9204\n","           WALLETS: Train Loss: 0.34478560, Acc: 0.87551342, F1: 0.92894849 Bal: 0.8394 - Val Loss: 0.34305638, Accuracy: 0.8749, F1: 0.9285 Bal: 0.8396\n","Epoch 105:      TX: Train Loss: 0.1047, Acc: 0.9630, F1: 0.9791 Bal: 0.9658 - Val Loss: 0.1867, Accuracy: 0.9491, F1: 0.9713 Bal: 0.9217\n","           WALLETS: Train Loss: 0.34361896, Acc: 0.87471154, F1: 0.92843227 Bal: 0.8408 - Val Loss: 0.34194767, Accuracy: 0.8742, F1: 0.9280 Bal: 0.8408\n","Epoch 106:      TX: Train Loss: 0.1030, Acc: 0.9645, F1: 0.9799 Bal: 0.9669 - Val Loss: 0.1878, Accuracy: 0.9502, F1: 0.9719 Bal: 0.9213\n","           WALLETS: Train Loss: 0.34245282, Acc: 0.87557147, F1: 0.92895661 Bal: 0.8414 - Val Loss: 0.34090889, Accuracy: 0.8750, F1: 0.9285 Bal: 0.8417\n","Epoch 107:      TX: Train Loss: 0.1014, Acc: 0.9642, F1: 0.9798 Bal: 0.9675 - Val Loss: 0.1871, Accuracy: 0.9502, F1: 0.9719 Bal: 0.9223\n","           WALLETS: Train Loss: 0.34130457, Acc: 0.87421082, F1: 0.92809170 Bal: 0.8430 - Val Loss: 0.33978781, Accuracy: 0.8738, F1: 0.9277 Bal: 0.8426\n","Epoch 108:      TX: Train Loss: 0.0998, Acc: 0.9666, F1: 0.9811 Bal: 0.9688 - Val Loss: 0.1895, Accuracy: 0.9517, F1: 0.9728 Bal: 0.9221\n","           WALLETS: Train Loss: 0.34017959, Acc: 0.87640963, F1: 0.92945548 Bal: 0.8429 - Val Loss: 0.33887762, Accuracy: 0.8757, F1: 0.9289 Bal: 0.8426\n","Epoch 109:      TX: Train Loss: 0.0982, Acc: 0.9647, F1: 0.9801 Bal: 0.9691 - Val Loss: 0.1870, Accuracy: 0.9500, F1: 0.9718 Bal: 0.9231\n","           WALLETS: Train Loss: 0.33911571, Acc: 0.87194671, F1: 0.92664860 Bal: 0.8456 - Val Loss: 0.33767977, Accuracy: 0.8721, F1: 0.9267 Bal: 0.8456\n","Epoch 110:      TX: Train Loss: 0.0967, Acc: 0.9688, F1: 0.9824 Bal: 0.9704 - Val Loss: 0.1918, Accuracy: 0.9544, F1: 0.9743 Bal: 0.9236\n","           WALLETS: Train Loss: 0.33821264, Acc: 0.87960625, F1: 0.93143784 Bal: 0.8421 - Val Loss: 0.33731088, Accuracy: 0.8792, F1: 0.9311 Bal: 0.8424\n","Epoch 111:      TX: Train Loss: 0.0952, Acc: 0.9653, F1: 0.9804 Bal: 0.9699 - Val Loss: 0.1870, Accuracy: 0.9504, F1: 0.9720 Bal: 0.9234\n","           WALLETS: Train Loss: 0.33743751, Acc: 0.86740396, F1: 0.92375707 Bal: 0.8493 - Val Loss: 0.33598268, Accuracy: 0.8680, F1: 0.9240 Bal: 0.8503\n","Epoch 112:      TX: Train Loss: 0.0937, Acc: 0.9695, F1: 0.9828 Bal: 0.9715 - Val Loss: 0.1918, Accuracy: 0.9552, F1: 0.9748 Bal: 0.9241\n","           WALLETS: Train Loss: 0.33625698, Acc: 0.88121000, F1: 0.93241483 Bal: 0.8428 - Val Loss: 0.33565289, Accuracy: 0.8805, F1: 0.9319 Bal: 0.8422\n","Epoch 113:      TX: Train Loss: 0.0921, Acc: 0.9685, F1: 0.9822 Bal: 0.9718 - Val Loss: 0.1903, Accuracy: 0.9541, F1: 0.9742 Bal: 0.9235\n","           WALLETS: Train Loss: 0.33471796, Acc: 0.87284655, F1: 0.92716768 Bal: 0.8484 - Val Loss: 0.33375895, Accuracy: 0.8730, F1: 0.9272 Bal: 0.8483\n","Epoch 114:      TX: Train Loss: 0.0908, Acc: 0.9680, F1: 0.9819 Bal: 0.9727 - Val Loss: 0.1895, Accuracy: 0.9524, F1: 0.9732 Bal: 0.9225\n","           WALLETS: Train Loss: 0.33378997, Acc: 0.87126820, F1: 0.92616402 Bal: 0.8499 - Val Loss: 0.33285367, Accuracy: 0.8719, F1: 0.9264 Bal: 0.8510\n","Epoch 115:      TX: Train Loss: 0.0894, Acc: 0.9710, F1: 0.9837 Bal: 0.9739 - Val Loss: 0.1941, Accuracy: 0.9577, F1: 0.9762 Bal: 0.9254\n","           WALLETS: Train Loss: 0.33308253, Acc: 0.88091247, F1: 0.93220188 Bal: 0.8451 - Val Loss: 0.33279020, Accuracy: 0.8807, F1: 0.9320 Bal: 0.8453\n","Epoch 116:      TX: Train Loss: 0.0881, Acc: 0.9688, F1: 0.9824 Bal: 0.9738 - Val Loss: 0.1904, Accuracy: 0.9537, F1: 0.9740 Bal: 0.9232\n","           WALLETS: Train Loss: 0.33179873, Acc: 0.87102147, F1: 0.92598708 Bal: 0.8515 - Val Loss: 0.33104274, Accuracy: 0.8711, F1: 0.9259 Bal: 0.8517\n","Epoch 117:      TX: Train Loss: 0.0867, Acc: 0.9706, F1: 0.9835 Bal: 0.9746 - Val Loss: 0.1935, Accuracy: 0.9572, F1: 0.9760 Bal: 0.9252\n","           WALLETS: Train Loss: 0.33061504, Acc: 0.87390967, F1: 0.92779448 Bal: 0.8509 - Val Loss: 0.33011988, Accuracy: 0.8742, F1: 0.9279 Bal: 0.8510\n","Epoch 118:      TX: Train Loss: 0.0854, Acc: 0.9715, F1: 0.9840 Bal: 0.9752 - Val Loss: 0.1947, Accuracy: 0.9579, F1: 0.9764 Bal: 0.9256\n","           WALLETS: Train Loss: 0.32991529, Acc: 0.88005980, F1: 0.93163581 Bal: 0.8483 - Val Loss: 0.32987064, Accuracy: 0.8802, F1: 0.9316 Bal: 0.8494\n","Epoch 119:      TX: Train Loss: 0.0842, Acc: 0.9702, F1: 0.9832 Bal: 0.9751 - Val Loss: 0.1924, Accuracy: 0.9546, F1: 0.9745 Bal: 0.9237\n","           WALLETS: Train Loss: 0.32891199, Acc: 0.87075659, F1: 0.92578981 Bal: 0.8537 - Val Loss: 0.32843161, Accuracy: 0.8707, F1: 0.9257 Bal: 0.8532\n","Epoch 120:      TX: Train Loss: 0.0830, Acc: 0.9726, F1: 0.9846 Bal: 0.9759 - Val Loss: 0.1968, Accuracy: 0.9581, F1: 0.9765 Bal: 0.9237\n","           WALLETS: Train Loss: 0.32768682, Acc: 0.87614476, F1: 0.92916624 Bal: 0.8520 - Val Loss: 0.32762769, Accuracy: 0.8762, F1: 0.9291 Bal: 0.8519\n","Epoch 121:      TX: Train Loss: 0.0817, Acc: 0.9716, F1: 0.9840 Bal: 0.9757 - Val Loss: 0.1949, Accuracy: 0.9566, F1: 0.9756 Bal: 0.9248\n","           WALLETS: Train Loss: 0.32687497, Acc: 0.87894225, F1: 0.93090480 Bal: 0.8514 - Val Loss: 0.32709670, Accuracy: 0.8788, F1: 0.9307 Bal: 0.8519\n","Epoch 122:      TX: Train Loss: 0.0805, Acc: 0.9721, F1: 0.9843 Bal: 0.9766 - Val Loss: 0.1958, Accuracy: 0.9570, F1: 0.9759 Bal: 0.9251\n","           WALLETS: Train Loss: 0.32607815, Acc: 0.87094890, F1: 0.92588742 Bal: 0.8553 - Val Loss: 0.32595938, Accuracy: 0.8707, F1: 0.9256 Bal: 0.8538\n","Epoch 123:      TX: Train Loss: 0.0794, Acc: 0.9738, F1: 0.9852 Bal: 0.9774 - Val Loss: 0.1984, Accuracy: 0.9583, F1: 0.9766 Bal: 0.9238\n","           WALLETS: Train Loss: 0.32494044, Acc: 0.87927969, F1: 0.93108441 Bal: 0.8536 - Val Loss: 0.32539234, Accuracy: 0.8790, F1: 0.9308 Bal: 0.8532\n","Epoch 124:      TX: Train Loss: 0.0783, Acc: 0.9726, F1: 0.9845 Bal: 0.9777 - Val Loss: 0.1960, Accuracy: 0.9566, F1: 0.9756 Bal: 0.9238\n","           WALLETS: Train Loss: 0.32396075, Acc: 0.87809683, F1: 0.93034885 Bal: 0.8539 - Val Loss: 0.32449061, Accuracy: 0.8778, F1: 0.9301 Bal: 0.8531\n","Epoch 125:      TX: Train Loss: 0.0772, Acc: 0.9745, F1: 0.9857 Bal: 0.9782 - Val Loss: 0.1992, Accuracy: 0.9581, F1: 0.9765 Bal: 0.9237\n","           WALLETS: Train Loss: 0.32322812, Acc: 0.87314770, F1: 0.92723174 Bal: 0.8572 - Val Loss: 0.32358778, Accuracy: 0.8730, F1: 0.9271 Bal: 0.8552\n","Epoch 126:      TX: Train Loss: 0.0761, Acc: 0.9742, F1: 0.9855 Bal: 0.9789 - Val Loss: 0.1984, Accuracy: 0.9570, F1: 0.9759 Bal: 0.9231\n","           WALLETS: Train Loss: 0.32230213, Acc: 0.88130434, F1: 0.93231900 Bal: 0.8546 - Val Loss: 0.32328454, Accuracy: 0.8808, F1: 0.9319 Bal: 0.8535\n","Epoch 127:      TX: Train Loss: 0.0751, Acc: 0.9746, F1: 0.9857 Bal: 0.9796 - Val Loss: 0.1985, Accuracy: 0.9561, F1: 0.9754 Bal: 0.9216\n","           WALLETS: Train Loss: 0.32124135, Acc: 0.87628264, F1: 0.92917838 Bal: 0.8574 - Val Loss: 0.32205671, Accuracy: 0.8759, F1: 0.9289 Bal: 0.8556\n","Epoch 128:      TX: Train Loss: 0.0740, Acc: 0.9763, F1: 0.9867 Bal: 0.9806 - Val Loss: 0.2009, Accuracy: 0.9577, F1: 0.9763 Bal: 0.9225\n","           WALLETS: Train Loss: 0.32036114, Acc: 0.87586537, F1: 0.92890540 Bal: 0.8584 - Val Loss: 0.32128951, Accuracy: 0.8751, F1: 0.9284 Bal: 0.8561\n","Epoch 129:      TX: Train Loss: 0.0730, Acc: 0.9753, F1: 0.9861 Bal: 0.9805 - Val Loss: 0.1989, Accuracy: 0.9555, F1: 0.9750 Bal: 0.9213\n","           WALLETS: Train Loss: 0.31958836, Acc: 0.88175063, F1: 0.93256497 Bal: 0.8569 - Val Loss: 0.32101074, Accuracy: 0.8812, F1: 0.9322 Bal: 0.8555\n","Epoch 130:      TX: Train Loss: 0.0721, Acc: 0.9771, F1: 0.9871 Bal: 0.9815 - Val Loss: 0.2016, Accuracy: 0.9568, F1: 0.9757 Bal: 0.9220\n","           WALLETS: Train Loss: 0.31868917, Acc: 0.87472606, F1: 0.92815615 Bal: 0.8613 - Val Loss: 0.31980541, Accuracy: 0.8741, F1: 0.9277 Bal: 0.8576\n","Epoch 131:      TX: Train Loss: 0.0711, Acc: 0.9767, F1: 0.9869 Bal: 0.9821 - Val Loss: 0.2005, Accuracy: 0.9559, F1: 0.9752 Bal: 0.9215\n","           WALLETS: Train Loss: 0.31769049, Acc: 0.87985298, F1: 0.93136903 Bal: 0.8588 - Val Loss: 0.31928825, Accuracy: 0.8793, F1: 0.9309 Bal: 0.8569\n","Epoch 132:      TX: Train Loss: 0.0702, Acc: 0.9773, F1: 0.9872 Bal: 0.9824 - Val Loss: 0.2014, Accuracy: 0.9561, F1: 0.9754 Bal: 0.9216\n","           WALLETS: Train Loss: 0.31680620, Acc: 0.87965704, F1: 0.93123003 Bal: 0.8602 - Val Loss: 0.31851736, Accuracy: 0.8787, F1: 0.9305 Bal: 0.8574\n","Epoch 133:      TX: Train Loss: 0.0693, Acc: 0.9781, F1: 0.9877 Bal: 0.9830 - Val Loss: 0.2027, Accuracy: 0.9563, F1: 0.9755 Bal: 0.9218\n","           WALLETS: Train Loss: 0.31603640, Acc: 0.87621733, F1: 0.92905641 Bal: 0.8633 - Val Loss: 0.31764418, Accuracy: 0.8758, F1: 0.9287 Bal: 0.8596\n","Epoch 134:      TX: Train Loss: 0.0684, Acc: 0.9773, F1: 0.9872 Bal: 0.9829 - Val Loss: 0.2016, Accuracy: 0.9561, F1: 0.9754 Bal: 0.9216\n","           WALLETS: Train Loss: 0.31523433, Acc: 0.88303508, F1: 0.93329774 Bal: 0.8613 - Val Loss: 0.31741720, Accuracy: 0.8820, F1: 0.9326 Bal: 0.8592\n","Epoch 135:      TX: Train Loss: 0.0675, Acc: 0.9787, F1: 0.9881 Bal: 0.9836 - Val Loss: 0.2047, Accuracy: 0.9574, F1: 0.9761 Bal: 0.9224\n","           WALLETS: Train Loss: 0.31434783, Acc: 0.87680513, F1: 0.92939183 Bal: 0.8655 - Val Loss: 0.31623551, Accuracy: 0.8764, F1: 0.9290 Bal: 0.8629\n","Epoch 136:      TX: Train Loss: 0.0667, Acc: 0.9781, F1: 0.9877 Bal: 0.9842 - Val Loss: 0.2025, Accuracy: 0.9561, F1: 0.9754 Bal: 0.9216\n","           WALLETS: Train Loss: 0.31342813, Acc: 0.88154744, F1: 0.93233793 Bal: 0.8647 - Val Loss: 0.31576645, Accuracy: 0.8809, F1: 0.9319 Bal: 0.8622\n","Epoch 137:      TX: Train Loss: 0.0659, Acc: 0.9793, F1: 0.9884 Bal: 0.9843 - Val Loss: 0.2056, Accuracy: 0.9572, F1: 0.9760 Bal: 0.9213\n","           WALLETS: Train Loss: 0.31257042, Acc: 0.88058228, F1: 0.93173087 Bal: 0.8655 - Val Loss: 0.31497481, Accuracy: 0.8800, F1: 0.9313 Bal: 0.8632\n","Epoch 138:      TX: Train Loss: 0.0651, Acc: 0.9786, F1: 0.9880 Bal: 0.9848 - Val Loss: 0.2040, Accuracy: 0.9570, F1: 0.9759 Bal: 0.9221\n","           WALLETS: Train Loss: 0.31177559, Acc: 0.87836534, F1: 0.93034573 Bal: 0.8665 - Val Loss: 0.31418052, Accuracy: 0.8773, F1: 0.9296 Bal: 0.8634\n","Epoch 139:      TX: Train Loss: 0.0643, Acc: 0.9796, F1: 0.9885 Bal: 0.9850 - Val Loss: 0.2059, Accuracy: 0.9572, F1: 0.9760 Bal: 0.9222\n","           WALLETS: Train Loss: 0.31100237, Acc: 0.88348500, F1: 0.93352021 Bal: 0.8656 - Val Loss: 0.31389436, Accuracy: 0.8828, F1: 0.9330 Bal: 0.8634\n","Epoch 140:      TX: Train Loss: 0.0635, Acc: 0.9796, F1: 0.9885 Bal: 0.9853 - Val Loss: 0.2059, Accuracy: 0.9574, F1: 0.9761 Bal: 0.9224\n","           WALLETS: Train Loss: 0.31023347, Acc: 0.87703372, F1: 0.92949953 Bal: 0.8680 - Val Loss: 0.31283420, Accuracy: 0.8759, F1: 0.9287 Bal: 0.8647\n","Epoch 141:      TX: Train Loss: 0.0628, Acc: 0.9796, F1: 0.9886 Bal: 0.9853 - Val Loss: 0.2061, Accuracy: 0.9577, F1: 0.9763 Bal: 0.9225\n","           WALLETS: Train Loss: 0.30943066, Acc: 0.88449007, F1: 0.93413335 Bal: 0.8660 - Val Loss: 0.31274167, Accuracy: 0.8836, F1: 0.9335 Bal: 0.8635\n","Epoch 142:      TX: Train Loss: 0.0620, Acc: 0.9803, F1: 0.9889 Bal: 0.9855 - Val Loss: 0.2078, Accuracy: 0.9579, F1: 0.9764 Bal: 0.9216\n","           WALLETS: Train Loss: 0.30861267, Acc: 0.87747638, F1: 0.92975624 Bal: 0.8693 - Val Loss: 0.31156495, Accuracy: 0.8763, F1: 0.9289 Bal: 0.8665\n","Epoch 143:      TX: Train Loss: 0.0613, Acc: 0.9799, F1: 0.9887 Bal: 0.9856 - Val Loss: 0.2063, Accuracy: 0.9577, F1: 0.9763 Bal: 0.9225\n","           WALLETS: Train Loss: 0.30776605, Acc: 0.88418165, F1: 0.93392919 Bal: 0.8671 - Val Loss: 0.31140763, Accuracy: 0.8834, F1: 0.9334 Bal: 0.8644\n","Epoch 144:      TX: Train Loss: 0.0606, Acc: 0.9811, F1: 0.9894 Bal: 0.9860 - Val Loss: 0.2095, Accuracy: 0.9579, F1: 0.9764 Bal: 0.9216\n","           WALLETS: Train Loss: 0.30692306, Acc: 0.87896039, F1: 0.93066459 Bal: 0.8702 - Val Loss: 0.31029433, Accuracy: 0.8777, F1: 0.9298 Bal: 0.8669\n","Epoch 145:      TX: Train Loss: 0.0600, Acc: 0.9803, F1: 0.9889 Bal: 0.9862 - Val Loss: 0.2066, Accuracy: 0.9572, F1: 0.9760 Bal: 0.9222\n","           WALLETS: Train Loss: 0.30608156, Acc: 0.88366279, F1: 0.93358962 Bal: 0.8687 - Val Loss: 0.30998302, Accuracy: 0.8830, F1: 0.9331 Bal: 0.8655\n","Epoch 146:      TX: Train Loss: 0.0593, Acc: 0.9817, F1: 0.9898 Bal: 0.9865 - Val Loss: 0.2115, Accuracy: 0.9585, F1: 0.9768 Bal: 0.9220\n","           WALLETS: Train Loss: 0.30525777, Acc: 0.88039361, F1: 0.93154804 Bal: 0.8705 - Val Loss: 0.30904827, Accuracy: 0.8795, F1: 0.9309 Bal: 0.8668\n","Epoch 147:      TX: Train Loss: 0.0587, Acc: 0.9803, F1: 0.9889 Bal: 0.9867 - Val Loss: 0.2069, Accuracy: 0.9574, F1: 0.9761 Bal: 0.9224\n","           WALLETS: Train Loss: 0.30444002, Acc: 0.88402200, F1: 0.93378795 Bal: 0.8705 - Val Loss: 0.30862093, Accuracy: 0.8831, F1: 0.9332 Bal: 0.8666\n","Epoch 148:      TX: Train Loss: 0.0581, Acc: 0.9826, F1: 0.9902 Bal: 0.9876 - Val Loss: 0.2135, Accuracy: 0.9596, F1: 0.9774 Bal: 0.9226\n","           WALLETS: Train Loss: 0.30363408, Acc: 0.88205541, F1: 0.93255961 Bal: 0.8717 - Val Loss: 0.30780303, Accuracy: 0.8811, F1: 0.9319 Bal: 0.8681\n","Epoch 149:      TX: Train Loss: 0.0575, Acc: 0.9807, F1: 0.9891 Bal: 0.9870 - Val Loss: 0.2073, Accuracy: 0.9579, F1: 0.9764 Bal: 0.9226\n","           WALLETS: Train Loss: 0.30283377, Acc: 0.88446467, F1: 0.93404914 Bal: 0.8713 - Val Loss: 0.30735755, Accuracy: 0.8834, F1: 0.9334 Bal: 0.8664\n","Epoch 150:      TX: Train Loss: 0.0569, Acc: 0.9829, F1: 0.9904 Bal: 0.9880 - Val Loss: 0.2147, Accuracy: 0.9609, F1: 0.9781 Bal: 0.9233\n","           WALLETS: Train Loss: 0.30205062, Acc: 0.88201913, F1: 0.93252458 Bal: 0.8727 - Val Loss: 0.30651689, Accuracy: 0.8810, F1: 0.9319 Bal: 0.8687\n","Epoch 151:      TX: Train Loss: 0.0563, Acc: 0.9812, F1: 0.9895 Bal: 0.9876 - Val Loss: 0.2089, Accuracy: 0.9583, F1: 0.9766 Bal: 0.9229\n","           WALLETS: Train Loss: 0.30129972, Acc: 0.88657276, F1: 0.93533487 Bal: 0.8721 - Val Loss: 0.30627477, Accuracy: 0.8854, F1: 0.9346 Bal: 0.8670\n","Epoch 152:      TX: Train Loss: 0.0556, Acc: 0.9829, F1: 0.9904 Bal: 0.9882 - Val Loss: 0.2144, Accuracy: 0.9609, F1: 0.9781 Bal: 0.9233\n","           WALLETS: Train Loss: 0.30067077, Acc: 0.87951554, F1: 0.93095920 Bal: 0.8739 - Val Loss: 0.30523044, Accuracy: 0.8783, F1: 0.9302 Bal: 0.8696\n","Epoch 153:      TX: Train Loss: 0.0551, Acc: 0.9824, F1: 0.9901 Bal: 0.9881 - Val Loss: 0.2119, Accuracy: 0.9599, F1: 0.9775 Bal: 0.9237\n","           WALLETS: Train Loss: 0.30038205, Acc: 0.89210244, F1: 0.93872589 Bal: 0.8713 - Val Loss: 0.30608878, Accuracy: 0.8913, F1: 0.9382 Bal: 0.8671\n","Epoch 154:      TX: Train Loss: 0.0545, Acc: 0.9827, F1: 0.9903 Bal: 0.9883 - Val Loss: 0.2131, Accuracy: 0.9603, F1: 0.9778 Bal: 0.9239\n","           WALLETS: Train Loss: 0.30089983, Acc: 0.87133351, F1: 0.92583258 Bal: 0.8757 - Val Loss: 0.30507094, Accuracy: 0.8699, F1: 0.9249 Bal: 0.8709\n","Epoch 155:      TX: Train Loss: 0.0540, Acc: 0.9833, F1: 0.9906 Bal: 0.9886 - Val Loss: 0.2149, Accuracy: 0.9607, F1: 0.9780 Bal: 0.9232\n","           WALLETS: Train Loss: 0.30121064, Acc: 0.89964950, F1: 0.94333174 Bal: 0.8683 - Val Loss: 0.30786914, Accuracy: 0.8983, F1: 0.9425 Bal: 0.8635\n","Epoch 156:      TX: Train Loss: 0.0535, Acc: 0.9827, F1: 0.9903 Bal: 0.9885 - Val Loss: 0.2124, Accuracy: 0.9599, F1: 0.9775 Bal: 0.9237\n","           WALLETS: Train Loss: 0.29901809, Acc: 0.87326744, F1: 0.92703816 Bal: 0.8761 - Val Loss: 0.30358887, Accuracy: 0.8718, F1: 0.9261 Bal: 0.8710\n","Epoch 157:      TX: Train Loss: 0.0530, Acc: 0.9841, F1: 0.9911 Bal: 0.9891 - Val Loss: 0.2172, Accuracy: 0.9609, F1: 0.9781 Bal: 0.9233\n","           WALLETS: Train Loss: 0.29675585, Acc: 0.88420342, F1: 0.93383725 Bal: 0.8753 - Val Loss: 0.30230513, Accuracy: 0.8833, F1: 0.9332 Bal: 0.8704\n","Epoch 158:      TX: Train Loss: 0.0525, Acc: 0.9828, F1: 0.9904 Bal: 0.9886 - Val Loss: 0.2128, Accuracy: 0.9599, F1: 0.9775 Bal: 0.9237\n","           WALLETS: Train Loss: 0.29769701, Acc: 0.89689555, F1: 0.94163223 Bal: 0.8716 - Val Loss: 0.30443287, Accuracy: 0.8960, F1: 0.9411 Bal: 0.8660\n","Epoch 159:      TX: Train Loss: 0.0520, Acc: 0.9845, F1: 0.9913 Bal: 0.9894 - Val Loss: 0.2184, Accuracy: 0.9614, F1: 0.9784 Bal: 0.9236\n","           WALLETS: Train Loss: 0.29699004, Acc: 0.87393869, F1: 0.92744113 Bal: 0.8773 - Val Loss: 0.30193225, Accuracy: 0.8725, F1: 0.9265 Bal: 0.8724\n","Epoch 160:      TX: Train Loss: 0.0515, Acc: 0.9833, F1: 0.9907 Bal: 0.9889 - Val Loss: 0.2144, Accuracy: 0.9599, F1: 0.9775 Bal: 0.9237\n","           WALLETS: Train Loss: 0.29471177, Acc: 0.88667436, F1: 0.93535133 Bal: 0.8758 - Val Loss: 0.30078030, Accuracy: 0.8856, F1: 0.9346 Bal: 0.8704\n","Epoch 161:      TX: Train Loss: 0.0510, Acc: 0.9847, F1: 0.9914 Bal: 0.9897 - Val Loss: 0.2185, Accuracy: 0.9607, F1: 0.9780 Bal: 0.9232\n","           WALLETS: Train Loss: 0.29524228, Acc: 0.89578889, F1: 0.94094400 Bal: 0.8732 - Val Loss: 0.30221391, Accuracy: 0.8949, F1: 0.9404 Bal: 0.8682\n","Epoch 162:      TX: Train Loss: 0.0505, Acc: 0.9841, F1: 0.9911 Bal: 0.9894 - Val Loss: 0.2166, Accuracy: 0.9601, F1: 0.9776 Bal: 0.9238\n","           WALLETS: Train Loss: 0.29459655, Acc: 0.87603591, F1: 0.92873874 Bal: 0.8781 - Val Loss: 0.30001557, Accuracy: 0.8751, F1: 0.9281 Bal: 0.8735\n","Epoch 163:      TX: Train Loss: 0.0501, Acc: 0.9847, F1: 0.9914 Bal: 0.9897 - Val Loss: 0.2182, Accuracy: 0.9603, F1: 0.9778 Bal: 0.9230\n","           WALLETS: Train Loss: 0.29275012, Acc: 0.88631152, F1: 0.93511238 Bal: 0.8771 - Val Loss: 0.29910314, Accuracy: 0.8848, F1: 0.9341 Bal: 0.8717\n","Epoch 164:      TX: Train Loss: 0.0496, Acc: 0.9848, F1: 0.9915 Bal: 0.9897 - Val Loss: 0.2188, Accuracy: 0.9605, F1: 0.9779 Bal: 0.9231\n","           WALLETS: Train Loss: 0.29315689, Acc: 0.89587960, F1: 0.94098266 Bal: 0.8746 - Val Loss: 0.30042568, Accuracy: 0.8953, F1: 0.9406 Bal: 0.8698\n","Epoch 165:      TX: Train Loss: 0.0492, Acc: 0.9847, F1: 0.9914 Bal: 0.9898 - Val Loss: 0.2181, Accuracy: 0.9603, F1: 0.9778 Bal: 0.9239\n","           WALLETS: Train Loss: 0.29231873, Acc: 0.87878623, F1: 0.93044107 Bal: 0.8788 - Val Loss: 0.29820594, Accuracy: 0.8779, F1: 0.9299 Bal: 0.8735\n","Epoch 166:      TX: Train Loss: 0.0488, Acc: 0.9856, F1: 0.9919 Bal: 0.9902 - Val Loss: 0.2208, Accuracy: 0.9625, F1: 0.9790 Bal: 0.9232\n","           WALLETS: Train Loss: 0.29091021, Acc: 0.88601762, F1: 0.93491593 Bal: 0.8783 - Val Loss: 0.29748672, Accuracy: 0.8844, F1: 0.9339 Bal: 0.8724\n","Epoch 167:      TX: Train Loss: 0.0484, Acc: 0.9848, F1: 0.9915 Bal: 0.9902 - Val Loss: 0.2180, Accuracy: 0.9603, F1: 0.9778 Bal: 0.9239\n","           WALLETS: Train Loss: 0.29117835, Acc: 0.89589048, F1: 0.94097633 Bal: 0.8758 - Val Loss: 0.29870343, Accuracy: 0.8950, F1: 0.9404 Bal: 0.8708\n","Epoch 168:      TX: Train Loss: 0.0480, Acc: 0.9860, F1: 0.9922 Bal: 0.9904 - Val Loss: 0.2224, Accuracy: 0.9627, F1: 0.9792 Bal: 0.9233\n","           WALLETS: Train Loss: 0.29020166, Acc: 0.88114106, F1: 0.93188812 Bal: 0.8798 - Val Loss: 0.29649392, Accuracy: 0.8800, F1: 0.9312 Bal: 0.8738\n","Epoch 169:      TX: Train Loss: 0.0476, Acc: 0.9849, F1: 0.9915 Bal: 0.9903 - Val Loss: 0.2177, Accuracy: 0.9605, F1: 0.9779 Bal: 0.9251\n","           WALLETS: Train Loss: 0.28914782, Acc: 0.88564752, F1: 0.93467591 Bal: 0.8793 - Val Loss: 0.29589161, Accuracy: 0.8843, F1: 0.9338 Bal: 0.8738\n","Epoch 170:      TX: Train Loss: 0.0472, Acc: 0.9865, F1: 0.9925 Bal: 0.9908 - Val Loss: 0.2244, Accuracy: 0.9645, F1: 0.9802 Bal: 0.9243\n","           WALLETS: Train Loss: 0.28924814, Acc: 0.89584694, F1: 0.94093439 Bal: 0.8771 - Val Loss: 0.29695547, Accuracy: 0.8950, F1: 0.9404 Bal: 0.8719\n","Epoch 171:      TX: Train Loss: 0.0469, Acc: 0.9846, F1: 0.9914 Bal: 0.9902 - Val Loss: 0.2172, Accuracy: 0.9609, F1: 0.9781 Bal: 0.9253\n","           WALLETS: Train Loss: 0.28825277, Acc: 0.88288994, F1: 0.93296280 Bal: 0.8803 - Val Loss: 0.29490033, Accuracy: 0.8815, F1: 0.9321 Bal: 0.8743\n","Epoch 172:      TX: Train Loss: 0.0465, Acc: 0.9870, F1: 0.9927 Bal: 0.9912 - Val Loss: 0.2266, Accuracy: 0.9653, F1: 0.9807 Bal: 0.9248\n","           WALLETS: Train Loss: 0.28739610, Acc: 0.88611921, F1: 0.93495022 Bal: 0.8806 - Val Loss: 0.29438812, Accuracy: 0.8846, F1: 0.9340 Bal: 0.8746\n","Epoch 173:      TX: Train Loss: 0.0462, Acc: 0.9848, F1: 0.9915 Bal: 0.9905 - Val Loss: 0.2174, Accuracy: 0.9612, F1: 0.9783 Bal: 0.9254\n","           WALLETS: Train Loss: 0.28733307, Acc: 0.89560747, F1: 0.94077445 Bal: 0.8784 - Val Loss: 0.29524732, Accuracy: 0.8946, F1: 0.9402 Bal: 0.8731\n","Epoch 174:      TX: Train Loss: 0.0458, Acc: 0.9872, F1: 0.9929 Bal: 0.9914 - Val Loss: 0.2267, Accuracy: 0.9653, F1: 0.9807 Bal: 0.9248\n","           WALLETS: Train Loss: 0.28641298, Acc: 0.88442113, F1: 0.93389476 Bal: 0.8813 - Val Loss: 0.29338205, Accuracy: 0.8828, F1: 0.9329 Bal: 0.8752\n","Epoch 175:      TX: Train Loss: 0.0454, Acc: 0.9857, F1: 0.9920 Bal: 0.9910 - Val Loss: 0.2196, Accuracy: 0.9623, F1: 0.9789 Bal: 0.9260\n","           WALLETS: Train Loss: 0.28564197, Acc: 0.88715694, F1: 0.93557449 Bal: 0.8817 - Val Loss: 0.29290694, Accuracy: 0.8859, F1: 0.9348 Bal: 0.8761\n","Epoch 176:      TX: Train Loss: 0.0450, Acc: 0.9868, F1: 0.9926 Bal: 0.9913 - Val Loss: 0.2246, Accuracy: 0.9649, F1: 0.9804 Bal: 0.9255\n","           WALLETS: Train Loss: 0.28546897, Acc: 0.89558570, F1: 0.94074161 Bal: 0.8802 - Val Loss: 0.29356903, Accuracy: 0.8944, F1: 0.9400 Bal: 0.8746\n","Epoch 177:      TX: Train Loss: 0.0446, Acc: 0.9866, F1: 0.9925 Bal: 0.9913 - Val Loss: 0.2235, Accuracy: 0.9645, F1: 0.9801 Bal: 0.9263\n","           WALLETS: Train Loss: 0.28467080, Acc: 0.88499078, F1: 0.93423818 Bal: 0.8819 - Val Loss: 0.29193103, Accuracy: 0.8837, F1: 0.9334 Bal: 0.8760\n","Epoch 178:      TX: Train Loss: 0.0443, Acc: 0.9864, F1: 0.9924 Bal: 0.9914 - Val Loss: 0.2221, Accuracy: 0.9636, F1: 0.9796 Bal: 0.9258\n","           WALLETS: Train Loss: 0.28389093, Acc: 0.88874980, F1: 0.93654397 Bal: 0.8824 - Val Loss: 0.29153794, Accuracy: 0.8875, F1: 0.9357 Bal: 0.8771\n","Epoch 179:      TX: Train Loss: 0.0440, Acc: 0.9875, F1: 0.9930 Bal: 0.9919 - Val Loss: 0.2266, Accuracy: 0.9651, F1: 0.9805 Bal: 0.9247\n","           WALLETS: Train Loss: 0.28363281, Acc: 0.89501604, F1: 0.94037915 Bal: 0.8816 - Val Loss: 0.29196945, Accuracy: 0.8940, F1: 0.9397 Bal: 0.8763\n","Epoch 180:      TX: Train Loss: 0.0437, Acc: 0.9863, F1: 0.9923 Bal: 0.9916 - Val Loss: 0.2208, Accuracy: 0.9627, F1: 0.9791 Bal: 0.9253\n","           WALLETS: Train Loss: 0.28299373, Acc: 0.88562938, F1: 0.93462205 Bal: 0.8827 - Val Loss: 0.29054153, Accuracy: 0.8845, F1: 0.9339 Bal: 0.8770\n","Epoch 181:      TX: Train Loss: 0.0434, Acc: 0.9877, F1: 0.9931 Bal: 0.9920 - Val Loss: 0.2281, Accuracy: 0.9651, F1: 0.9805 Bal: 0.9247\n","           WALLETS: Train Loss: 0.28217843, Acc: 0.89082161, F1: 0.93780642 Bal: 0.8829 - Val Loss: 0.29026034, Accuracy: 0.8896, F1: 0.9370 Bal: 0.8775\n","Epoch 182:      TX: Train Loss: 0.0430, Acc: 0.9866, F1: 0.9925 Bal: 0.9919 - Val Loss: 0.2216, Accuracy: 0.9629, F1: 0.9793 Bal: 0.9254\n","           WALLETS: Train Loss: 0.28180432, Acc: 0.89464231, F1: 0.94013891 Bal: 0.8827 - Val Loss: 0.29035160, Accuracy: 0.8935, F1: 0.9394 Bal: 0.8779\n","Epoch 183:      TX: Train Loss: 0.0427, Acc: 0.9877, F1: 0.9931 Bal: 0.9921 - Val Loss: 0.2278, Accuracy: 0.9653, F1: 0.9807 Bal: 0.9248\n","           WALLETS: Train Loss: 0.28133070, Acc: 0.88641674, F1: 0.93509622 Bal: 0.8835 - Val Loss: 0.28919739, Accuracy: 0.8851, F1: 0.9342 Bal: 0.8782\n","Epoch 184:      TX: Train Loss: 0.0424, Acc: 0.9870, F1: 0.9928 Bal: 0.9920 - Val Loss: 0.2240, Accuracy: 0.9645, F1: 0.9801 Bal: 0.9253\n","           WALLETS: Train Loss: 0.28054366, Acc: 0.89300228, F1: 0.93913306 Bal: 0.8833 - Val Loss: 0.28914836, Accuracy: 0.8919, F1: 0.9384 Bal: 0.8781\n","Epoch 185:      TX: Train Loss: 0.0421, Acc: 0.9876, F1: 0.9930 Bal: 0.9923 - Val Loss: 0.2261, Accuracy: 0.9651, F1: 0.9805 Bal: 0.9256\n","           WALLETS: Train Loss: 0.27999967, Acc: 0.89339777, F1: 0.93937193 Bal: 0.8835 - Val Loss: 0.28875676, Accuracy: 0.8923, F1: 0.9387 Bal: 0.8782\n","Epoch 186:      TX: Train Loss: 0.0418, Acc: 0.9877, F1: 0.9931 Bal: 0.9924 - Val Loss: 0.2265, Accuracy: 0.9651, F1: 0.9805 Bal: 0.9256\n","           WALLETS: Train Loss: 0.27961913, Acc: 0.88762500, F1: 0.93583095 Bal: 0.8842 - Val Loss: 0.28790495, Accuracy: 0.8862, F1: 0.9350 Bal: 0.8783\n","Epoch 187:      TX: Train Loss: 0.0415, Acc: 0.9874, F1: 0.9929 Bal: 0.9922 - Val Loss: 0.2248, Accuracy: 0.9647, F1: 0.9803 Bal: 0.9254\n","           WALLETS: Train Loss: 0.27899098, Acc: 0.89526640, F1: 0.94050331 Bal: 0.8840 - Val Loss: 0.28812796, Accuracy: 0.8945, F1: 0.9400 Bal: 0.8787\n","Epoch 188:      TX: Train Loss: 0.0412, Acc: 0.9883, F1: 0.9934 Bal: 0.9927 - Val Loss: 0.2287, Accuracy: 0.9653, F1: 0.9806 Bal: 0.9258\n","           WALLETS: Train Loss: 0.27830938, Acc: 0.89140579, F1: 0.93814597 Bal: 0.8844 - Val Loss: 0.28718096, Accuracy: 0.8899, F1: 0.9372 Bal: 0.8784\n","Epoch 189:      TX: Train Loss: 0.0409, Acc: 0.9873, F1: 0.9929 Bal: 0.9924 - Val Loss: 0.2239, Accuracy: 0.9645, F1: 0.9801 Bal: 0.9253\n","           WALLETS: Train Loss: 0.27782732, Acc: 0.88993266, F1: 0.93724282 Bal: 0.8845 - Val Loss: 0.28667223, Accuracy: 0.8884, F1: 0.9363 Bal: 0.8782\n","Epoch 190:      TX: Train Loss: 0.0407, Acc: 0.9887, F1: 0.9937 Bal: 0.9929 - Val Loss: 0.2306, Accuracy: 0.9660, F1: 0.9810 Bal: 0.9261\n","           WALLETS: Train Loss: 0.27738798, Acc: 0.89615535, F1: 0.94103735 Bal: 0.8846 - Val Loss: 0.28693971, Accuracy: 0.8952, F1: 0.9404 Bal: 0.8788\n","Epoch 191:      TX: Train Loss: 0.0404, Acc: 0.9872, F1: 0.9928 Bal: 0.9923 - Val Loss: 0.2235, Accuracy: 0.9645, F1: 0.9801 Bal: 0.9263\n","           WALLETS: Train Loss: 0.27681249, Acc: 0.88960610, F1: 0.93703709 Bal: 0.8850 - Val Loss: 0.28583622, Accuracy: 0.8882, F1: 0.9362 Bal: 0.8788\n","Epoch 192:      TX: Train Loss: 0.0401, Acc: 0.9889, F1: 0.9938 Bal: 0.9932 - Val Loss: 0.2319, Accuracy: 0.9664, F1: 0.9813 Bal: 0.9254\n","           WALLETS: Train Loss: 0.27617511, Acc: 0.89385132, F1: 0.93963150 Bal: 0.8849 - Val Loss: 0.28574792, Accuracy: 0.8928, F1: 0.9390 Bal: 0.8795\n","Epoch 193:      TX: Train Loss: 0.0399, Acc: 0.9873, F1: 0.9929 Bal: 0.9924 - Val Loss: 0.2237, Accuracy: 0.9647, F1: 0.9803 Bal: 0.9264\n","           WALLETS: Train Loss: 0.27565280, Acc: 0.89420328, F1: 0.93984221 Bal: 0.8853 - Val Loss: 0.28537545, Accuracy: 0.8931, F1: 0.9392 Bal: 0.8795\n","Epoch 194:      TX: Train Loss: 0.0396, Acc: 0.9889, F1: 0.9938 Bal: 0.9932 - Val Loss: 0.2324, Accuracy: 0.9671, F1: 0.9816 Bal: 0.9258\n","           WALLETS: Train Loss: 0.27521464, Acc: 0.89047329, F1: 0.93755766 Bal: 0.8858 - Val Loss: 0.28467321, Accuracy: 0.8892, F1: 0.9367 Bal: 0.8794\n","Epoch 195:      TX: Train Loss: 0.0393, Acc: 0.9877, F1: 0.9931 Bal: 0.9927 - Val Loss: 0.2251, Accuracy: 0.9651, F1: 0.9805 Bal: 0.9256\n","           WALLETS: Train Loss: 0.27472302, Acc: 0.89658350, F1: 0.94128384 Bal: 0.8858 - Val Loss: 0.28491884, Accuracy: 0.8954, F1: 0.9406 Bal: 0.8794\n","Epoch 196:      TX: Train Loss: 0.0391, Acc: 0.9889, F1: 0.9938 Bal: 0.9932 - Val Loss: 0.2319, Accuracy: 0.9664, F1: 0.9813 Bal: 0.9254\n","           WALLETS: Train Loss: 0.27416694, Acc: 0.89119171, F1: 0.93799136 Bal: 0.8863 - Val Loss: 0.28391865, Accuracy: 0.8901, F1: 0.9373 Bal: 0.8801\n","Epoch 197:      TX: Train Loss: 0.0388, Acc: 0.9882, F1: 0.9934 Bal: 0.9929 - Val Loss: 0.2274, Accuracy: 0.9653, F1: 0.9806 Bal: 0.9258\n","           WALLETS: Train Loss: 0.27359545, Acc: 0.89499064, F1: 0.94031122 Bal: 0.8862 - Val Loss: 0.28383225, Accuracy: 0.8937, F1: 0.9395 Bal: 0.8803\n","Epoch 198:      TX: Train Loss: 0.0385, Acc: 0.9889, F1: 0.9938 Bal: 0.9932 - Val Loss: 0.2305, Accuracy: 0.9656, F1: 0.9808 Bal: 0.9249\n","           WALLETS: Train Loss: 0.27308467, Acc: 0.89463143, F1: 0.94008888 Bal: 0.8865 - Val Loss: 0.28339341, Accuracy: 0.8934, F1: 0.9393 Bal: 0.8805\n","Epoch 199:      TX: Train Loss: 0.0383, Acc: 0.9888, F1: 0.9937 Bal: 0.9932 - Val Loss: 0.2297, Accuracy: 0.9658, F1: 0.9809 Bal: 0.9260\n","           WALLETS: Train Loss: 0.27262387, Acc: 0.89240359, F1: 0.93872685 Bal: 0.8868 - Val Loss: 0.28283623, Accuracy: 0.8912, F1: 0.9380 Bal: 0.8807\n","Epoch 200:      TX: Train Loss: 0.0380, Acc: 0.9888, F1: 0.9937 Bal: 0.9932 - Val Loss: 0.2293, Accuracy: 0.9656, F1: 0.9808 Bal: 0.9259\n","           WALLETS: Train Loss: 0.27216783, Acc: 0.89713865, F1: 0.94160613 Bal: 0.8871 - Val Loss: 0.28296915, Accuracy: 0.8956, F1: 0.9407 Bal: 0.8799\n","Epoch 201:      TX: Train Loss: 0.0378, Acc: 0.9890, F1: 0.9939 Bal: 0.9934 - Val Loss: 0.2316, Accuracy: 0.9662, F1: 0.9812 Bal: 0.9253\n","           WALLETS: Train Loss: 0.27170917, Acc: 0.89154366, F1: 0.93819487 Bal: 0.8873 - Val Loss: 0.28205955, Accuracy: 0.8902, F1: 0.9373 Bal: 0.8814\n","Epoch 202:      TX: Train Loss: 0.0376, Acc: 0.9887, F1: 0.9937 Bal: 0.9932 - Val Loss: 0.2283, Accuracy: 0.9653, F1: 0.9806 Bal: 0.9258\n","           WALLETS: Train Loss: 0.27121809, Acc: 0.89791875, F1: 0.94207726 Bal: 0.8873 - Val Loss: 0.28234366, Accuracy: 0.8966, F1: 0.9413 Bal: 0.8803\n","Epoch 203:      TX: Train Loss: 0.0374, Acc: 0.9895, F1: 0.9941 Bal: 0.9936 - Val Loss: 0.2338, Accuracy: 0.9677, F1: 0.9820 Bal: 0.9261\n","           WALLETS: Train Loss: 0.27072036, Acc: 0.89227297, F1: 0.93863370 Bal: 0.8879 - Val Loss: 0.28136405, Accuracy: 0.8909, F1: 0.9378 Bal: 0.8816\n","Epoch 204:      TX: Train Loss: 0.0372, Acc: 0.9883, F1: 0.9935 Bal: 0.9930 - Val Loss: 0.2272, Accuracy: 0.9647, F1: 0.9803 Bal: 0.9254\n","           WALLETS: Train Loss: 0.27020770, Acc: 0.89794415, F1: 0.94208822 Bal: 0.8877 - Val Loss: 0.28156886, Accuracy: 0.8967, F1: 0.9413 Bal: 0.8811\n","Epoch 205:      TX: Train Loss: 0.0370, Acc: 0.9900, F1: 0.9944 Bal: 0.9938 - Val Loss: 0.2366, Accuracy: 0.9682, F1: 0.9823 Bal: 0.9264\n","           WALLETS: Train Loss: 0.26970994, Acc: 0.89339052, F1: 0.93931320 Bal: 0.8881 - Val Loss: 0.28070420, Accuracy: 0.8922, F1: 0.9386 Bal: 0.8819\n","Epoch 206:      TX: Train Loss: 0.0368, Acc: 0.9878, F1: 0.9932 Bal: 0.9927 - Val Loss: 0.2254, Accuracy: 0.9640, F1: 0.9799 Bal: 0.9260\n","           WALLETS: Train Loss: 0.26921391, Acc: 0.89771193, F1: 0.94194449 Bal: 0.8879 - Val Loss: 0.28079659, Accuracy: 0.8965, F1: 0.9412 Bal: 0.8814\n","Epoch 207:      TX: Train Loss: 0.0366, Acc: 0.9906, F1: 0.9948 Bal: 0.9941 - Val Loss: 0.2395, Accuracy: 0.9688, F1: 0.9827 Bal: 0.9248\n","           WALLETS: Train Loss: 0.26873806, Acc: 0.89408354, F1: 0.93973347 Bal: 0.8884 - Val Loss: 0.28005156, Accuracy: 0.8929, F1: 0.9390 Bal: 0.8822\n","Epoch 208:      TX: Train Loss: 0.0365, Acc: 0.9877, F1: 0.9931 Bal: 0.9926 - Val Loss: 0.2245, Accuracy: 0.9642, F1: 0.9800 Bal: 0.9271\n","           WALLETS: Train Loss: 0.26826471, Acc: 0.89819088, F1: 0.94222941 Bal: 0.8884 - Val Loss: 0.28014132, Accuracy: 0.8968, F1: 0.9414 Bal: 0.8814\n","Epoch 209:      TX: Train Loss: 0.0362, Acc: 0.9906, F1: 0.9947 Bal: 0.9941 - Val Loss: 0.2396, Accuracy: 0.9693, F1: 0.9829 Bal: 0.9270\n","           WALLETS: Train Loss: 0.26782048, Acc: 0.89429399, F1: 0.93985569 Bal: 0.8889 - Val Loss: 0.27938229, Accuracy: 0.8926, F1: 0.9388 Bal: 0.8824\n","Epoch 210:      TX: Train Loss: 0.0359, Acc: 0.9886, F1: 0.9936 Bal: 0.9931 - Val Loss: 0.2281, Accuracy: 0.9645, F1: 0.9801 Bal: 0.9253\n","           WALLETS: Train Loss: 0.26740494, Acc: 0.89985994, F1: 0.94323658 Bal: 0.8888 - Val Loss: 0.27971527, Accuracy: 0.8986, F1: 0.9425 Bal: 0.8811\n","Epoch 211:      TX: Train Loss: 0.0356, Acc: 0.9900, F1: 0.9944 Bal: 0.9939 - Val Loss: 0.2347, Accuracy: 0.9677, F1: 0.9820 Bal: 0.9261\n","           WALLETS: Train Loss: 0.26708531, Acc: 0.89230926, F1: 0.93863838 Bal: 0.8894 - Val Loss: 0.27868190, Accuracy: 0.8906, F1: 0.9376 Bal: 0.8826\n","Epoch 212:      TX: Train Loss: 0.0354, Acc: 0.9900, F1: 0.9944 Bal: 0.9939 - Val Loss: 0.2347, Accuracy: 0.9677, F1: 0.9820 Bal: 0.9261\n","           WALLETS: Train Loss: 0.26695174, Acc: 0.90370967, F1: 0.94556017 Bal: 0.8887 - Val Loss: 0.27992526, Accuracy: 0.9020, F1: 0.9446 Bal: 0.8797\n","Epoch 213:      TX: Train Loss: 0.0352, Acc: 0.9892, F1: 0.9940 Bal: 0.9935 - Val Loss: 0.2295, Accuracy: 0.9651, F1: 0.9805 Bal: 0.9256\n","           WALLETS: Train Loss: 0.26732653, Acc: 0.88642763, F1: 0.93503011 Bal: 0.8893 - Val Loss: 0.27848864, Accuracy: 0.8845, F1: 0.9338 Bal: 0.8819\n","Epoch 214:      TX: Train Loss: 0.0351, Acc: 0.9906, F1: 0.9948 Bal: 0.9941 - Val Loss: 0.2397, Accuracy: 0.9693, F1: 0.9829 Bal: 0.9270\n","           WALLETS: Train Loss: 0.26836848, Acc: 0.91166311, F1: 0.95033334 Bal: 0.8874 - Val Loss: 0.28251293, Accuracy: 0.9103, F1: 0.9495 Bal: 0.8785\n","Epoch 215:      TX: Train Loss: 0.0349, Acc: 0.9889, F1: 0.9938 Bal: 0.9933 - Val Loss: 0.2281, Accuracy: 0.9642, F1: 0.9800 Bal: 0.9261\n","           WALLETS: Train Loss: 0.26974621, Acc: 0.87725868, F1: 0.92934424 Bal: 0.8895 - Val Loss: 0.28015432, Accuracy: 0.8761, F1: 0.9286 Bal: 0.8821\n","Epoch 216:      TX: Train Loss: 0.0347, Acc: 0.9908, F1: 0.9949 Bal: 0.9944 - Val Loss: 0.2399, Accuracy: 0.9691, F1: 0.9828 Bal: 0.9269\n","           WALLETS: Train Loss: 0.26805678, Acc: 0.91316889, F1: 0.95123119 Bal: 0.8871 - Val Loss: 0.28257394, Accuracy: 0.9119, F1: 0.9505 Bal: 0.8778\n","Epoch 217:      TX: Train Loss: 0.0344, Acc: 0.9896, F1: 0.9942 Bal: 0.9937 - Val Loss: 0.2318, Accuracy: 0.9660, F1: 0.9810 Bal: 0.9251\n","           WALLETS: Train Loss: 0.26481754, Acc: 0.89156906, F1: 0.93817777 Bal: 0.8901 - Val Loss: 0.27688679, Accuracy: 0.8897, F1: 0.9370 Bal: 0.8827\n","Epoch 218:      TX: Train Loss: 0.0342, Acc: 0.9902, F1: 0.9945 Bal: 0.9940 - Val Loss: 0.2352, Accuracy: 0.9671, F1: 0.9816 Bal: 0.9258\n","           WALLETS: Train Loss: 0.26448628, Acc: 0.89140941, F1: 0.93807880 Bal: 0.8902 - Val Loss: 0.27659452, Accuracy: 0.8894, F1: 0.9368 Bal: 0.8828\n","Epoch 219:      TX: Train Loss: 0.0340, Acc: 0.9906, F1: 0.9947 Bal: 0.9942 - Val Loss: 0.2375, Accuracy: 0.9677, F1: 0.9820 Bal: 0.9261\n","           WALLETS: Train Loss: 0.26613984, Acc: 0.91190621, F1: 0.95047053 Bal: 0.8882 - Val Loss: 0.28074583, Accuracy: 0.9103, F1: 0.9495 Bal: 0.8796\n","Epoch 220:      TX: Train Loss: 0.0338, Acc: 0.9898, F1: 0.9943 Bal: 0.9939 - Val Loss: 0.2315, Accuracy: 0.9660, F1: 0.9810 Bal: 0.9251\n","           WALLETS: Train Loss: 0.26527807, Acc: 0.88486016, F1: 0.93403896 Bal: 0.8912 - Val Loss: 0.27685690, Accuracy: 0.8826, F1: 0.9326 Bal: 0.8831\n","Epoch 221:      TX: Train Loss: 0.0337, Acc: 0.9910, F1: 0.9950 Bal: 0.9945 - Val Loss: 0.2407, Accuracy: 0.9691, F1: 0.9828 Bal: 0.9269\n","           WALLETS: Train Loss: 0.26289299, Acc: 0.90041872, F1: 0.94355819 Bal: 0.8903 - Val Loss: 0.27631932, Accuracy: 0.8987, F1: 0.9425 Bal: 0.8816\n","Epoch 222:      TX: Train Loss: 0.0335, Acc: 0.9899, F1: 0.9943 Bal: 0.9940 - Val Loss: 0.2318, Accuracy: 0.9664, F1: 0.9813 Bal: 0.9274\n","           WALLETS: Train Loss: 0.26346564, Acc: 0.90704779, F1: 0.94755268 Bal: 0.8899 - Val Loss: 0.27774057, Accuracy: 0.9053, F1: 0.9465 Bal: 0.8806\n","Epoch 223:      TX: Train Loss: 0.0333, Acc: 0.9909, F1: 0.9949 Bal: 0.9944 - Val Loss: 0.2397, Accuracy: 0.9686, F1: 0.9825 Bal: 0.9266\n","           WALLETS: Train Loss: 0.26421052, Acc: 0.88540805, F1: 0.93437370 Bal: 0.8915 - Val Loss: 0.27603784, Accuracy: 0.8833, F1: 0.9331 Bal: 0.8828\n","Epoch 224:      TX: Train Loss: 0.0330, Acc: 0.9904, F1: 0.9946 Bal: 0.9943 - Val Loss: 0.2353, Accuracy: 0.9669, F1: 0.9815 Bal: 0.9256\n","           WALLETS: Train Loss: 0.26227826, Acc: 0.90523360, F1: 0.94645976 Bal: 0.8903 - Val Loss: 0.27651441, Accuracy: 0.9034, F1: 0.9454 Bal: 0.8814\n","Epoch 225:      TX: Train Loss: 0.0329, Acc: 0.9906, F1: 0.9947 Bal: 0.9944 - Val Loss: 0.2367, Accuracy: 0.9669, F1: 0.9815 Bal: 0.9256\n","           WALLETS: Train Loss: 0.26164258, Acc: 0.90324886, F1: 0.94526203 Bal: 0.8907 - Val Loss: 0.27574202, Accuracy: 0.9015, F1: 0.9442 Bal: 0.8819\n","Epoch 226:      TX: Train Loss: 0.0327, Acc: 0.9910, F1: 0.9950 Bal: 0.9946 - Val Loss: 0.2390, Accuracy: 0.9686, F1: 0.9825 Bal: 0.9266\n","           WALLETS: Train Loss: 0.26251987, Acc: 0.88818014, F1: 0.93607444 Bal: 0.8921 - Val Loss: 0.27490252, Accuracy: 0.8860, F1: 0.9347 Bal: 0.8840\n","Epoch 227:      TX: Train Loss: 0.0325, Acc: 0.9902, F1: 0.9945 Bal: 0.9942 - Val Loss: 0.2342, Accuracy: 0.9667, F1: 0.9814 Bal: 0.9265\n","           WALLETS: Train Loss: 0.26153940, Acc: 0.90711310, F1: 0.94758373 Bal: 0.8907 - Val Loss: 0.27621272, Accuracy: 0.9053, F1: 0.9465 Bal: 0.8814\n","Epoch 228:      TX: Train Loss: 0.0324, Acc: 0.9913, F1: 0.9952 Bal: 0.9948 - Val Loss: 0.2413, Accuracy: 0.9688, F1: 0.9826 Bal: 0.9267\n","           WALLETS: Train Loss: 0.26039156, Acc: 0.89981640, F1: 0.94317590 Bal: 0.8919 - Val Loss: 0.27423635, Accuracy: 0.8976, F1: 0.9418 Bal: 0.8829\n","Epoch 229:      TX: Train Loss: 0.0322, Acc: 0.9902, F1: 0.9945 Bal: 0.9943 - Val Loss: 0.2337, Accuracy: 0.9664, F1: 0.9813 Bal: 0.9274\n","           WALLETS: Train Loss: 0.26080191, Acc: 0.89182305, F1: 0.93830471 Bal: 0.8924 - Val Loss: 0.27379996, Accuracy: 0.8896, F1: 0.9369 Bal: 0.8842\n","Epoch 230:      TX: Train Loss: 0.0320, Acc: 0.9915, F1: 0.9952 Bal: 0.9949 - Val Loss: 0.2415, Accuracy: 0.9693, F1: 0.9829 Bal: 0.9270\n","           WALLETS: Train Loss: 0.26061112, Acc: 0.90771179, F1: 0.94794065 Bal: 0.8909 - Val Loss: 0.27567080, Accuracy: 0.9061, F1: 0.9470 Bal: 0.8812\n","Epoch 231:      TX: Train Loss: 0.0319, Acc: 0.9905, F1: 0.9947 Bal: 0.9945 - Val Loss: 0.2354, Accuracy: 0.9669, F1: 0.9815 Bal: 0.9266\n","           WALLETS: Train Loss: 0.25950512, Acc: 0.89713865, F1: 0.94154062 Bal: 0.8929 - Val Loss: 0.27326700, Accuracy: 0.8951, F1: 0.9403 Bal: 0.8842\n","Epoch 232:      TX: Train Loss: 0.0317, Acc: 0.9912, F1: 0.9951 Bal: 0.9947 - Val Loss: 0.2402, Accuracy: 0.9684, F1: 0.9824 Bal: 0.9265\n","           WALLETS: Train Loss: 0.25928888, Acc: 0.89616624, F1: 0.94094900 Bal: 0.8930 - Val Loss: 0.27297813, Accuracy: 0.8942, F1: 0.9398 Bal: 0.8842\n","Epoch 233:      TX: Train Loss: 0.0315, Acc: 0.9910, F1: 0.9950 Bal: 0.9948 - Val Loss: 0.2380, Accuracy: 0.9682, F1: 0.9823 Bal: 0.9273\n","           WALLETS: Train Loss: 0.25946850, Acc: 0.90754488, F1: 0.94783476 Bal: 0.8914 - Val Loss: 0.27471054, Accuracy: 0.9060, F1: 0.9469 Bal: 0.8821\n","Epoch 234:      TX: Train Loss: 0.0313, Acc: 0.9911, F1: 0.9950 Bal: 0.9948 - Val Loss: 0.2385, Accuracy: 0.9682, F1: 0.9823 Bal: 0.9273\n","           WALLETS: Train Loss: 0.25880346, Acc: 0.89502329, F1: 0.94025055 Bal: 0.8932 - Val Loss: 0.27257487, Accuracy: 0.8931, F1: 0.9391 Bal: 0.8849\n","Epoch 235:      TX: Train Loss: 0.0312, Acc: 0.9913, F1: 0.9952 Bal: 0.9949 - Val Loss: 0.2401, Accuracy: 0.9684, F1: 0.9824 Bal: 0.9265\n","           WALLETS: Train Loss: 0.25810853, Acc: 0.90034615, F1: 0.94347823 Bal: 0.8936 - Val Loss: 0.27262723, Accuracy: 0.8979, F1: 0.9420 Bal: 0.8840\n","Epoch 236:      TX: Train Loss: 0.0310, Acc: 0.9910, F1: 0.9950 Bal: 0.9947 - Val Loss: 0.2372, Accuracy: 0.9680, F1: 0.9821 Bal: 0.9272\n","           WALLETS: Train Loss: 0.25816473, Acc: 0.90577786, F1: 0.94676747 Bal: 0.8922 - Val Loss: 0.27349478, Accuracy: 0.9038, F1: 0.9456 Bal: 0.8830\n","Epoch 237:      TX: Train Loss: 0.0309, Acc: 0.9918, F1: 0.9954 Bal: 0.9952 - Val Loss: 0.2418, Accuracy: 0.9688, F1: 0.9826 Bal: 0.9267\n","           WALLETS: Train Loss: 0.25802979, Acc: 0.89428673, F1: 0.93979489 Bal: 0.8937 - Val Loss: 0.27194288, Accuracy: 0.8923, F1: 0.9386 Bal: 0.8851\n","Epoch 238:      TX: Train Loss: 0.0307, Acc: 0.9908, F1: 0.9949 Bal: 0.9947 - Val Loss: 0.2361, Accuracy: 0.9677, F1: 0.9820 Bal: 0.9281\n","           WALLETS: Train Loss: 0.25729814, Acc: 0.90411605, F1: 0.94575766 Bal: 0.8932 - Val Loss: 0.27254954, Accuracy: 0.9020, F1: 0.9445 Bal: 0.8837\n","Epoch 239:      TX: Train Loss: 0.0306, Acc: 0.9920, F1: 0.9955 Bal: 0.9953 - Val Loss: 0.2433, Accuracy: 0.9688, F1: 0.9827 Bal: 0.9248\n","           WALLETS: Train Loss: 0.25691620, Acc: 0.90324161, F1: 0.94522644 Bal: 0.8936 - Val Loss: 0.27213615, Accuracy: 0.9008, F1: 0.9438 Bal: 0.8834\n","Epoch 240:      TX: Train Loss: 0.0305, Acc: 0.9908, F1: 0.9949 Bal: 0.9947 - Val Loss: 0.2351, Accuracy: 0.9671, F1: 0.9816 Bal: 0.9277\n","           WALLETS: Train Loss: 0.25693259, Acc: 0.89609367, F1: 0.94089285 Bal: 0.8940 - Val Loss: 0.27132910, Accuracy: 0.8941, F1: 0.9397 Bal: 0.8848\n","Epoch 241:      TX: Train Loss: 0.0303, Acc: 0.9921, F1: 0.9956 Bal: 0.9954 - Val Loss: 0.2449, Accuracy: 0.9697, F1: 0.9832 Bal: 0.9253\n","           WALLETS: Train Loss: 0.25659329, Acc: 0.90647088, F1: 0.94717297 Bal: 0.8932 - Val Loss: 0.27240044, Accuracy: 0.9046, F1: 0.9460 Bal: 0.8834\n","Epoch 242:      TX: Train Loss: 0.0302, Acc: 0.9908, F1: 0.9949 Bal: 0.9948 - Val Loss: 0.2342, Accuracy: 0.9669, F1: 0.9815 Bal: 0.9276\n","           WALLETS: Train Loss: 0.25601557, Acc: 0.89974384, F1: 0.94310500 Bal: 0.8944 - Val Loss: 0.27100211, Accuracy: 0.8974, F1: 0.9417 Bal: 0.8845\n","Epoch 243:      TX: Train Loss: 0.0301, Acc: 0.9923, F1: 0.9957 Bal: 0.9955 - Val Loss: 0.2463, Accuracy: 0.9697, F1: 0.9832 Bal: 0.9243\n","           WALLETS: Train Loss: 0.25570908, Acc: 0.89982729, F1: 0.94315458 Bal: 0.8945 - Val Loss: 0.27079856, Accuracy: 0.8974, F1: 0.9417 Bal: 0.8845\n","Epoch 244:      TX: Train Loss: 0.0299, Acc: 0.9908, F1: 0.9949 Bal: 0.9948 - Val Loss: 0.2339, Accuracy: 0.9669, F1: 0.9815 Bal: 0.9276\n","           WALLETS: Train Loss: 0.25561264, Acc: 0.90618424, F1: 0.94699597 Bal: 0.8937 - Val Loss: 0.27162990, Accuracy: 0.9041, F1: 0.9457 Bal: 0.8841\n","Epoch 245:      TX: Train Loss: 0.0298, Acc: 0.9924, F1: 0.9958 Bal: 0.9955 - Val Loss: 0.2464, Accuracy: 0.9697, F1: 0.9832 Bal: 0.9243\n","           WALLETS: Train Loss: 0.25531828, Acc: 0.89747972, F1: 0.94172749 Bal: 0.8947 - Val Loss: 0.27024657, Accuracy: 0.8950, F1: 0.9402 Bal: 0.8848\n","Epoch 246:      TX: Train Loss: 0.0296, Acc: 0.9910, F1: 0.9950 Bal: 0.9949 - Val Loss: 0.2351, Accuracy: 0.9671, F1: 0.9816 Bal: 0.9277\n","           WALLETS: Train Loss: 0.25481361, Acc: 0.90430836, F1: 0.94586256 Bal: 0.8943 - Val Loss: 0.27069625, Accuracy: 0.9020, F1: 0.9445 Bal: 0.8843\n","Epoch 247:      TX: Train Loss: 0.0294, Acc: 0.9922, F1: 0.9957 Bal: 0.9954 - Val Loss: 0.2447, Accuracy: 0.9688, F1: 0.9827 Bal: 0.9238\n","           WALLETS: Train Loss: 0.25447035, Acc: 0.90336860, F1: 0.94529485 Bal: 0.8944 - Val Loss: 0.27029222, Accuracy: 0.9006, F1: 0.9436 Bal: 0.8845\n","Epoch 248:      TX: Train Loss: 0.0293, Acc: 0.9915, F1: 0.9953 Bal: 0.9952 - Val Loss: 0.2380, Accuracy: 0.9684, F1: 0.9824 Bal: 0.9275\n","           WALLETS: Train Loss: 0.25431761, Acc: 0.89908710, F1: 0.94269797 Bal: 0.8952 - Val Loss: 0.26966649, Accuracy: 0.8967, F1: 0.9413 Bal: 0.8849\n","Epoch 249:      TX: Train Loss: 0.0291, Acc: 0.9920, F1: 0.9955 Bal: 0.9953 - Val Loss: 0.2419, Accuracy: 0.9693, F1: 0.9829 Bal: 0.9280\n","           WALLETS: Train Loss: 0.25408608, Acc: 0.90661239, F1: 0.94724458 Bal: 0.8945 - Val Loss: 0.27049795, Accuracy: 0.9042, F1: 0.9458 Bal: 0.8839\n","Epoch 250:      TX: Train Loss: 0.0290, Acc: 0.9919, F1: 0.9955 Bal: 0.9953 - Val Loss: 0.2411, Accuracy: 0.9693, F1: 0.9829 Bal: 0.9280\n","           WALLETS: Train Loss: 0.25371036, Acc: 0.89969304, F1: 0.94306304 Bal: 0.8954 - Val Loss: 0.26926443, Accuracy: 0.8970, F1: 0.9415 Bal: 0.8845\n","Epoch 251:      TX: Train Loss: 0.0288, Acc: 0.9918, F1: 0.9954 Bal: 0.9953 - Val Loss: 0.2396, Accuracy: 0.9693, F1: 0.9829 Bal: 0.9280\n","           WALLETS: Train Loss: 0.25331050, Acc: 0.90348471, F1: 0.94535856 Bal: 0.8950 - Val Loss: 0.26946366, Accuracy: 0.9007, F1: 0.9437 Bal: 0.8849\n","Epoch 252:      TX: Train Loss: 0.0287, Acc: 0.9923, F1: 0.9957 Bal: 0.9954 - Val Loss: 0.2437, Accuracy: 0.9691, F1: 0.9828 Bal: 0.9249\n","           WALLETS: Train Loss: 0.25303826, Acc: 0.90414508, F1: 0.94575649 Bal: 0.8950 - Val Loss: 0.26935604, Accuracy: 0.9014, F1: 0.9441 Bal: 0.8846\n","Epoch 253:      TX: Train Loss: 0.0286, Acc: 0.9916, F1: 0.9953 Bal: 0.9952 - Val Loss: 0.2375, Accuracy: 0.9682, F1: 0.9823 Bal: 0.9273\n","           WALLETS: Train Loss: 0.25284761, Acc: 0.89995428, F1: 0.94321811 Bal: 0.8957 - Val Loss: 0.26866800, Accuracy: 0.8972, F1: 0.9416 Bal: 0.8844\n","Epoch 254:      TX: Train Loss: 0.0285, Acc: 0.9925, F1: 0.9958 Bal: 0.9956 - Val Loss: 0.2459, Accuracy: 0.9693, F1: 0.9829 Bal: 0.9230\n","           WALLETS: Train Loss: 0.25260007, Acc: 0.90673212, F1: 0.94730779 Bal: 0.8954 - Val Loss: 0.26936933, Accuracy: 0.9041, F1: 0.9458 Bal: 0.8841\n","Epoch 255:      TX: Train Loss: 0.0284, Acc: 0.9914, F1: 0.9952 Bal: 0.9951 - Val Loss: 0.2357, Accuracy: 0.9671, F1: 0.9816 Bal: 0.9277\n","           WALLETS: Train Loss: 0.25228149, Acc: 0.90021190, F1: 0.94337237 Bal: 0.8959 - Val Loss: 0.26828200, Accuracy: 0.8972, F1: 0.9416 Bal: 0.8843\n","Epoch 256:      TX: Train Loss: 0.0283, Acc: 0.9930, F1: 0.9961 Bal: 0.9958 - Val Loss: 0.2482, Accuracy: 0.9695, F1: 0.9830 Bal: 0.9232\n","           WALLETS: Train Loss: 0.25192741, Acc: 0.90497598, F1: 0.94625086 Bal: 0.8956 - Val Loss: 0.26861888, Accuracy: 0.9022, F1: 0.9446 Bal: 0.8845\n","Epoch 257:      TX: Train Loss: 0.0282, Acc: 0.9913, F1: 0.9951 Bal: 0.9950 - Val Loss: 0.2344, Accuracy: 0.9664, F1: 0.9813 Bal: 0.9274\n","           WALLETS: Train Loss: 0.25162211, Acc: 0.90348471, F1: 0.94535205 Bal: 0.8956 - Val Loss: 0.26818874, Accuracy: 0.9007, F1: 0.9437 Bal: 0.8847\n","Epoch 258:      TX: Train Loss: 0.0281, Acc: 0.9931, F1: 0.9962 Bal: 0.9961 - Val Loss: 0.2492, Accuracy: 0.9704, F1: 0.9835 Bal: 0.9237\n","           WALLETS: Train Loss: 0.25137469, Acc: 0.90232725, F1: 0.94464790 Bal: 0.8962 - Val Loss: 0.26784325, Accuracy: 0.8993, F1: 0.9429 Bal: 0.8846\n","Epoch 259:      TX: Train Loss: 0.0280, Acc: 0.9914, F1: 0.9952 Bal: 0.9951 - Val Loss: 0.2348, Accuracy: 0.9669, F1: 0.9815 Bal: 0.9276\n","           WALLETS: Train Loss: 0.25115049, Acc: 0.90635840, F1: 0.94707680 Bal: 0.8961 - Val Loss: 0.26823121, Accuracy: 0.9038, F1: 0.9456 Bal: 0.8848\n","Epoch 260:      TX: Train Loss: 0.0278, Acc: 0.9930, F1: 0.9961 Bal: 0.9960 - Val Loss: 0.2478, Accuracy: 0.9702, F1: 0.9834 Bal: 0.9235\n","           WALLETS: Train Loss: 0.25092399, Acc: 0.90134396, F1: 0.94403507 Bal: 0.8979 - Val Loss: 0.26735693, Accuracy: 0.8980, F1: 0.9421 Bal: 0.8860\n","Epoch 261:      TX: Train Loss: 0.0276, Acc: 0.9919, F1: 0.9955 Bal: 0.9954 - Val Loss: 0.2382, Accuracy: 0.9684, F1: 0.9824 Bal: 0.9285\n","           WALLETS: Train Loss: 0.25065535, Acc: 0.90721470, F1: 0.94759106 Bal: 0.8960 - Val Loss: 0.26800132, Accuracy: 0.9047, F1: 0.9461 Bal: 0.8849\n","Epoch 262:      TX: Train Loss: 0.0274, Acc: 0.9927, F1: 0.9959 Bal: 0.9958 - Val Loss: 0.2442, Accuracy: 0.9693, F1: 0.9829 Bal: 0.9250\n","           WALLETS: Train Loss: 0.25037110, Acc: 0.90171768, F1: 0.94425844 Bal: 0.8982 - Val Loss: 0.26700464, Accuracy: 0.8985, F1: 0.9423 Bal: 0.8862\n","Epoch 263:      TX: Train Loss: 0.0273, Acc: 0.9925, F1: 0.9958 Bal: 0.9957 - Val Loss: 0.2425, Accuracy: 0.9691, F1: 0.9828 Bal: 0.9259\n","           WALLETS: Train Loss: 0.25006670, Acc: 0.90654707, F1: 0.94718690 Bal: 0.8964 - Val Loss: 0.26746678, Accuracy: 0.9041, F1: 0.9457 Bal: 0.8850\n","Epoch 264:      TX: Train Loss: 0.0272, Acc: 0.9923, F1: 0.9957 Bal: 0.9956 - Val Loss: 0.2404, Accuracy: 0.9691, F1: 0.9828 Bal: 0.9278\n","           WALLETS: Train Loss: 0.24977535, Acc: 0.90307470, F1: 0.94507736 Bal: 0.8982 - Val Loss: 0.26675159, Accuracy: 0.9002, F1: 0.9434 Bal: 0.8859\n","Epoch 265:      TX: Train Loss: 0.0271, Acc: 0.9928, F1: 0.9960 Bal: 0.9959 - Val Loss: 0.2459, Accuracy: 0.9702, F1: 0.9834 Bal: 0.9245\n","           WALLETS: Train Loss: 0.24949098, Acc: 0.90552387, F1: 0.94656811 Bal: 0.8968 - Val Loss: 0.26690105, Accuracy: 0.9027, F1: 0.9449 Bal: 0.8851\n","Epoch 266:      TX: Train Loss: 0.0270, Acc: 0.9920, F1: 0.9955 Bal: 0.9954 - Val Loss: 0.2376, Accuracy: 0.9684, F1: 0.9824 Bal: 0.9285\n","           WALLETS: Train Loss: 0.24922298, Acc: 0.90454057, F1: 0.94596021 Bal: 0.8983 - Val Loss: 0.26655513, Accuracy: 0.9016, F1: 0.9442 Bal: 0.8860\n","Epoch 267:      TX: Train Loss: 0.0270, Acc: 0.9931, F1: 0.9962 Bal: 0.9960 - Val Loss: 0.2486, Accuracy: 0.9710, F1: 0.9839 Bal: 0.9240\n","           WALLETS: Train Loss: 0.24896063, Acc: 0.90485261, F1: 0.94614637 Bal: 0.8985 - Val Loss: 0.26640978, Accuracy: 0.9019, F1: 0.9444 Bal: 0.8862\n","Epoch 268:      TX: Train Loss: 0.0269, Acc: 0.9918, F1: 0.9954 Bal: 0.9953 - Val Loss: 0.2363, Accuracy: 0.9682, F1: 0.9823 Bal: 0.9283\n","           WALLETS: Train Loss: 0.24870512, Acc: 0.90569440, F1: 0.94666270 Bal: 0.8975 - Val Loss: 0.26637292, Accuracy: 0.9027, F1: 0.9449 Bal: 0.8857\n","Epoch 269:      TX: Train Loss: 0.0268, Acc: 0.9932, F1: 0.9962 Bal: 0.9961 - Val Loss: 0.2494, Accuracy: 0.9715, F1: 0.9842 Bal: 0.9243\n","           WALLETS: Train Loss: 0.24845868, Acc: 0.90410154, F1: 0.94568947 Bal: 0.8989 - Val Loss: 0.26597276, Accuracy: 0.9012, F1: 0.9440 Bal: 0.8868\n","Epoch 270:      TX: Train Loss: 0.0266, Acc: 0.9920, F1: 0.9955 Bal: 0.9954 - Val Loss: 0.2368, Accuracy: 0.9682, F1: 0.9823 Bal: 0.9293\n","           WALLETS: Train Loss: 0.24821694, Acc: 0.90701514, F1: 0.94744527 Bal: 0.8986 - Val Loss: 0.26620698, Accuracy: 0.9041, F1: 0.9457 Bal: 0.8866\n","Epoch 271:      TX: Train Loss: 0.0265, Acc: 0.9931, F1: 0.9962 Bal: 0.9961 - Val Loss: 0.2481, Accuracy: 0.9713, F1: 0.9840 Bal: 0.9251\n","           WALLETS: Train Loss: 0.24799810, Acc: 0.90321621, F1: 0.94514954 Bal: 0.8995 - Val Loss: 0.26551154, Accuracy: 0.9002, F1: 0.9434 Bal: 0.8870\n","Epoch 272:      TX: Train Loss: 0.0263, Acc: 0.9924, F1: 0.9958 Bal: 0.9956 - Val Loss: 0.2395, Accuracy: 0.9684, F1: 0.9824 Bal: 0.9265\n","           WALLETS: Train Loss: 0.24780610, Acc: 0.90849189, F1: 0.94834402 Bal: 0.8973 - Val Loss: 0.26621720, Accuracy: 0.9056, F1: 0.9466 Bal: 0.8857\n","Epoch 273:      TX: Train Loss: 0.0262, Acc: 0.9929, F1: 0.9960 Bal: 0.9959 - Val Loss: 0.2451, Accuracy: 0.9704, F1: 0.9835 Bal: 0.9246\n","           WALLETS: Train Loss: 0.24770345, Acc: 0.90116979, F1: 0.94390649 Bal: 0.9001 - Val Loss: 0.26507375, Accuracy: 0.8983, F1: 0.9422 Bal: 0.8883\n","Epoch 274:      TX: Train Loss: 0.0261, Acc: 0.9927, F1: 0.9959 Bal: 0.9958 - Val Loss: 0.2431, Accuracy: 0.9697, F1: 0.9831 Bal: 0.9262\n","           WALLETS: Train Loss: 0.24774206, Acc: 0.91186993, F1: 0.95036548 Bal: 0.8970 - Val Loss: 0.26683143, Accuracy: 0.9094, F1: 0.9489 Bal: 0.8858\n","Epoch 275:      TX: Train Loss: 0.0260, Acc: 0.9927, F1: 0.9959 Bal: 0.9958 - Val Loss: 0.2421, Accuracy: 0.9695, F1: 0.9830 Bal: 0.9261\n","           WALLETS: Train Loss: 0.24817494, Acc: 0.89629323, F1: 0.94093261 Bal: 0.9012 - Val Loss: 0.26495707, Accuracy: 0.8934, F1: 0.9392 Bal: 0.8899\n","Epoch 276:      TX: Train Loss: 0.0259, Acc: 0.9931, F1: 0.9962 Bal: 0.9960 - Val Loss: 0.2463, Accuracy: 0.9713, F1: 0.9840 Bal: 0.9261\n","           WALLETS: Train Loss: 0.24910146, Acc: 0.91816157, F1: 0.95411426 Bal: 0.8955 - Val Loss: 0.26939243, Accuracy: 0.9160, F1: 0.9529 Bal: 0.8833\n","Epoch 277:      TX: Train Loss: 0.0258, Acc: 0.9925, F1: 0.9958 Bal: 0.9957 - Val Loss: 0.2398, Accuracy: 0.9693, F1: 0.9829 Bal: 0.9280\n","           WALLETS: Train Loss: 0.25089225, Acc: 0.88706985, F1: 0.93528157 Bal: 0.9008 - Val Loss: 0.26658183, Accuracy: 0.8842, F1: 0.9335 Bal: 0.8907\n","Epoch 278:      TX: Train Loss: 0.0258, Acc: 0.9934, F1: 0.9963 Bal: 0.9962 - Val Loss: 0.2491, Accuracy: 0.9719, F1: 0.9844 Bal: 0.9255\n","           WALLETS: Train Loss: 0.25142309, Acc: 0.92316149, F1: 0.95708075 Bal: 0.8930 - Val Loss: 0.27285355, Accuracy: 0.9210, F1: 0.9559 Bal: 0.8805\n","Epoch 279:      TX: Train Loss: 0.0257, Acc: 0.9923, F1: 0.9957 Bal: 0.9956 - Val Loss: 0.2379, Accuracy: 0.9686, F1: 0.9825 Bal: 0.9276\n","           WALLETS: Train Loss: 0.24983925, Acc: 0.88906547, F1: 0.93650576 Bal: 0.9013 - Val Loss: 0.26590627, Accuracy: 0.8857, F1: 0.9345 Bal: 0.8903\n","Epoch 280:      TX: Train Loss: 0.0256, Acc: 0.9936, F1: 0.9964 Bal: 0.9963 - Val Loss: 0.2508, Accuracy: 0.9721, F1: 0.9845 Bal: 0.9256\n","           WALLETS: Train Loss: 0.24636967, Acc: 0.91245773, F1: 0.95071385 Bal: 0.8972 - Val Loss: 0.26603240, Accuracy: 0.9101, F1: 0.9493 Bal: 0.8859\n","Epoch 281:      TX: Train Loss: 0.0255, Acc: 0.9923, F1: 0.9957 Bal: 0.9956 - Val Loss: 0.2375, Accuracy: 0.9686, F1: 0.9825 Bal: 0.9286\n","           WALLETS: Train Loss: 0.24604297, Acc: 0.91215294, F1: 0.95052507 Bal: 0.8980 - Val Loss: 0.26567718, Accuracy: 0.9097, F1: 0.9491 Bal: 0.8868\n","Epoch 282:      TX: Train Loss: 0.0254, Acc: 0.9937, F1: 0.9965 Bal: 0.9964 - Val Loss: 0.2509, Accuracy: 0.9719, F1: 0.9844 Bal: 0.9255\n","           WALLETS: Train Loss: 0.24818538, Acc: 0.89131145, F1: 0.93788169 Bal: 0.9016 - Val Loss: 0.26477078, Accuracy: 0.8883, F1: 0.9361 Bal: 0.8912\n","Epoch 283:      TX: Train Loss: 0.0253, Acc: 0.9925, F1: 0.9958 Bal: 0.9957 - Val Loss: 0.2393, Accuracy: 0.9684, F1: 0.9824 Bal: 0.9265\n","           WALLETS: Train Loss: 0.24807760, Acc: 0.91955850, F1: 0.95493866 Bal: 0.8956 - Val Loss: 0.26917806, Accuracy: 0.9174, F1: 0.9537 Bal: 0.8829\n","Epoch 284:      TX: Train Loss: 0.0252, Acc: 0.9935, F1: 0.9964 Bal: 0.9963 - Val Loss: 0.2488, Accuracy: 0.9717, F1: 0.9843 Bal: 0.9264\n","           WALLETS: Train Loss: 0.24580206, Acc: 0.89879320, F1: 0.94243941 Bal: 0.9025 - Val Loss: 0.26354936, Accuracy: 0.8951, F1: 0.9403 Bal: 0.8901\n","Epoch 285:      TX: Train Loss: 0.0250, Acc: 0.9928, F1: 0.9960 Bal: 0.9959 - Val Loss: 0.2428, Accuracy: 0.9699, F1: 0.9833 Bal: 0.9273\n","           WALLETS: Train Loss: 0.24485205, Acc: 0.90394914, F1: 0.94557320 Bal: 0.9013 - Val Loss: 0.26346451, Accuracy: 0.9012, F1: 0.9439 Bal: 0.8892\n","Epoch 286:      TX: Train Loss: 0.0249, Acc: 0.9931, F1: 0.9961 Bal: 0.9960 - Val Loss: 0.2455, Accuracy: 0.9715, F1: 0.9841 Bal: 0.9272\n","           WALLETS: Train Loss: 0.24617893, Acc: 0.91706216, F1: 0.95345134 Bal: 0.8970 - Val Loss: 0.26705387, Accuracy: 0.9145, F1: 0.9520 Bal: 0.8852\n","Epoch 287:      TX: Train Loss: 0.0248, Acc: 0.9932, F1: 0.9962 Bal: 0.9961 - Val Loss: 0.2462, Accuracy: 0.9717, F1: 0.9843 Bal: 0.9273\n","           WALLETS: Train Loss: 0.24642067, Acc: 0.89463868, F1: 0.93990480 Bal: 0.9028 - Val Loss: 0.26377836, Accuracy: 0.8912, F1: 0.9378 Bal: 0.8906\n","Epoch 288:      TX: Train Loss: 0.0248, Acc: 0.9929, F1: 0.9960 Bal: 0.9959 - Val Loss: 0.2433, Accuracy: 0.9704, F1: 0.9835 Bal: 0.9276\n","           WALLETS: Train Loss: 0.24456865, Acc: 0.91260286, F1: 0.95076821 Bal: 0.9007 - Val Loss: 0.26484108, Accuracy: 0.9098, F1: 0.9491 Bal: 0.8889\n","Epoch 289:      TX: Train Loss: 0.0247, Acc: 0.9936, F1: 0.9964 Bal: 0.9963 - Val Loss: 0.2489, Accuracy: 0.9717, F1: 0.9843 Bal: 0.9264\n","           WALLETS: Train Loss: 0.24408993, Acc: 0.91059636, F1: 0.94956442 Bal: 0.9013 - Val Loss: 0.26406243, Accuracy: 0.9076, F1: 0.9478 Bal: 0.8894\n","Epoch 290:      TX: Train Loss: 0.0246, Acc: 0.9928, F1: 0.9960 Bal: 0.9959 - Val Loss: 0.2417, Accuracy: 0.9691, F1: 0.9828 Bal: 0.9269\n","           WALLETS: Train Loss: 0.24510331, Acc: 0.89680846, F1: 0.94122728 Bal: 0.9029 - Val Loss: 0.26299012, Accuracy: 0.8933, F1: 0.9391 Bal: 0.8914\n","Epoch 291:      TX: Train Loss: 0.0245, Acc: 0.9939, F1: 0.9966 Bal: 0.9965 - Val Loss: 0.2507, Accuracy: 0.9719, F1: 0.9844 Bal: 0.9265\n","           WALLETS: Train Loss: 0.24475791, Acc: 0.91620586, F1: 0.95293259 Bal: 0.8982 - Val Loss: 0.26589650, Accuracy: 0.9133, F1: 0.9512 Bal: 0.8864\n","Epoch 292:      TX: Train Loss: 0.0245, Acc: 0.9926, F1: 0.9959 Bal: 0.9958 - Val Loss: 0.2402, Accuracy: 0.9684, F1: 0.9824 Bal: 0.9265\n","           WALLETS: Train Loss: 0.24351241, Acc: 0.90358993, F1: 0.94533919 Bal: 0.9029 - Val Loss: 0.26268059, Accuracy: 0.9006, F1: 0.9436 Bal: 0.8907\n","Epoch 293:      TX: Train Loss: 0.0244, Acc: 0.9941, F1: 0.9967 Bal: 0.9966 - Val Loss: 0.2524, Accuracy: 0.9719, F1: 0.9844 Bal: 0.9265\n","           WALLETS: Train Loss: 0.24331142, Acc: 0.90395640, F1: 0.94555828 Bal: 0.9031 - Val Loss: 0.26251939, Accuracy: 0.9009, F1: 0.9438 Bal: 0.8909\n","Epoch 294:      TX: Train Loss: 0.0243, Acc: 0.9926, F1: 0.9959 Bal: 0.9958 - Val Loss: 0.2398, Accuracy: 0.9682, F1: 0.9823 Bal: 0.9264\n","           WALLETS: Train Loss: 0.24387740, Acc: 0.91599179, F1: 0.95277914 Bal: 0.9012 - Val Loss: 0.26504689, Accuracy: 0.9128, F1: 0.9509 Bal: 0.8880\n","Epoch 295:      TX: Train Loss: 0.0242, Acc: 0.9941, F1: 0.9967 Bal: 0.9966 - Val Loss: 0.2532, Accuracy: 0.9719, F1: 0.9844 Bal: 0.9265\n","           WALLETS: Train Loss: 0.24357231, Acc: 0.89979463, F1: 0.94303835 Bal: 0.9033 - Val Loss: 0.26226324, Accuracy: 0.8962, F1: 0.9409 Bal: 0.8910\n","Epoch 296:      TX: Train Loss: 0.0241, Acc: 0.9928, F1: 0.9960 Bal: 0.9959 - Val Loss: 0.2404, Accuracy: 0.9686, F1: 0.9825 Bal: 0.9266\n","           WALLETS: Train Loss: 0.24262552, Acc: 0.91042220, F1: 0.94944941 Bal: 0.9024 - Val Loss: 0.26315564, Accuracy: 0.9073, F1: 0.9477 Bal: 0.8895\n","Epoch 297:      TX: Train Loss: 0.0240, Acc: 0.9941, F1: 0.9967 Bal: 0.9966 - Val Loss: 0.2520, Accuracy: 0.9717, F1: 0.9843 Bal: 0.9264\n","           WALLETS: Train Loss: 0.24251191, Acc: 0.91139461, F1: 0.95002926 Bal: 0.9026 - Val Loss: 0.26326528, Accuracy: 0.9078, F1: 0.9479 Bal: 0.8892\n","Epoch 298:      TX: Train Loss: 0.0239, Acc: 0.9930, F1: 0.9961 Bal: 0.9960 - Val Loss: 0.2420, Accuracy: 0.9702, F1: 0.9834 Bal: 0.9275\n","           WALLETS: Train Loss: 0.24287722, Acc: 0.90058562, F1: 0.94351269 Bal: 0.9038 - Val Loss: 0.26190081, Accuracy: 0.8973, F1: 0.9416 Bal: 0.8911\n","Epoch 299:      TX: Train Loss: 0.0238, Acc: 0.9940, F1: 0.9966 Bal: 0.9965 - Val Loss: 0.2503, Accuracy: 0.9715, F1: 0.9841 Bal: 0.9262\n","           WALLETS: Train Loss: 0.24253762, Acc: 0.91452954, F1: 0.95190395 Bal: 0.9019 - Val Loss: 0.26385951, Accuracy: 0.9112, F1: 0.9500 Bal: 0.8886\n","Epoch 300:      TX: Train Loss: 0.0237, Acc: 0.9932, F1: 0.9962 Bal: 0.9961 - Val Loss: 0.2442, Accuracy: 0.9708, F1: 0.9838 Bal: 0.9268\n","           WALLETS: Train Loss: 0.24185550, Acc: 0.90590122, F1: 0.94672446 Bal: 0.9037 - Val Loss: 0.26184642, Accuracy: 0.9031, F1: 0.9451 Bal: 0.8919\n","{'hidden_channels': 64, 'num_head': 2, 'num_layers': 2, 'num_epoch': 300, 'patience': 50, 'lr': 0.001, 'weight_decay': 0.0005, 'dropout': 0, 'conv_type': 'Transformer', 'p': 10, 'factor': 0.2, 'eta_min': None, 'T_max': None, 'aggr': 'sum', 'lr_scheduler': 'ReduceLROnPlateau', 'optimizer': 'Adam', 'type_model': 'HeteroGNN', 'scaler': 'standard_l2', 'dim_reduction': 'pca', 'pca_threshold': 0.99, 'epoch': 300, 'end': True}\n","Final_result for w\n","{'hidden_channels': 64, 'num_head': 2, 'num_layers': 2, 'num_epoch': 300, 'patience': 50, 'lr': 0.001, 'weight_decay': 0.0005, 'dropout': 0, 'conv_type': 'Transformer', 'p': 10, 'factor': 0.2, 'eta_min': None, 'T_max': None, 'aggr': 'sum', 'lr_scheduler': 'ReduceLROnPlateau', 'optimizer': 'Adam', 'type_model': 'HeteroGNN', 'scaler': 'standard_l2', 'dim_reduction': 'pca', 'pca_threshold': 0.99, 'epoch': 300}\n","Epoch 300:\n","  TX:\n","   Train: Loss=0.0237, Acc=0.9932, F1=0.9962, Bal. Acc=0.9961\n","   Val:   Loss=0.2442, Acc=0.9708, F1=0.9838, Bal. Acc=0.9268\n","   Test:  Loss=0.2470, Acc=0.9658, F1=0.9810, Bal. Acc=0.9180\n","              precision    recall  f1-score   support\n","\n","           0       0.84      0.87      0.86       453\n","           1       0.99      0.98      0.98      4105\n","\n","    accuracy                           0.97      4558\n","   macro avg       0.91      0.93      0.92      4558\n","weighted avg       0.97      0.97      0.97      4558\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.80      0.86      0.83       665\n","           1       0.98      0.98      0.98      6172\n","\n","    accuracy                           0.97      6837\n","   macro avg       0.89      0.92      0.91      6837\n","weighted avg       0.97      0.97      0.97      6837\n","\n","  WALLETS:\n","   Train: Loss=0.24185550, Acc=0.90590122, F1=0.94672446, Bal. Acc=0.9037\n","   Val:   Loss=0.26184642, Acc=0.9031, F1=0.9451, Bal. Acc=0.8919\n","   Test:  Loss=0.25967175, Acc=0.9018, F1=0.9443, Bal. Acc=0.8916\n","              precision    recall  f1-score   support\n","\n","           0       0.44      0.88      0.59      2906\n","           1       0.99      0.91      0.95     33841\n","\n","    accuracy                           0.90     36747\n","   macro avg       0.72      0.89      0.77     36747\n","weighted avg       0.95      0.90      0.92     36747\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.44      0.88      0.59      4340\n","           1       0.99      0.90      0.94     50781\n","\n","    accuracy                           0.90     55121\n","   macro avg       0.71      0.89      0.76     55121\n","weighted avg       0.95      0.90      0.92     55121\n","\n","\n"]}],"source":["hyperparams = {\n","    \"hidden_channels\": [64],#\n","    'num_head': [2],#\n","    \"num_layers\": [2],\n","    \"num_epoch\": [300],\n","    \"patience\": [50],\n","    \"lr\": [0.001],\n","    \"weight_decay\": [0.0005],\n","    \"dropout\": [0],\n","    \"conv_type\": ['Transformer'],\n","    \"p\": [10],#\n","    \"factor\": [0.2],#\n","    \"eta_min\": ['/'],\n","    \"T_max\": ['/'],\n","    \"aggr\": ['sum'],\n","    'lr_scheduler':['ReduceLROnPlateau'],\n","    'optimizer': ['Adam'],\n","    'type_model':['HeteroGNN'],\n","}\n","\n","scaler = ['standard_l2']\n","dim_reduction=['pca']\n","pca_threshold=[0.99]\n","best_model = train_grid(data, hyperparams, scaler, dim_reduction, pca_threshold)"]}],"metadata":{"colab":{"provenance":[{"file_id":"1wIoomnaeh74t1AKH1zYUzUr42JRiCeq-","timestamp":1739893838211}],"collapsed_sections":["I9_WOiTVqySU"]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}